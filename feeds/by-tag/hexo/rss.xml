<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Rubicon&#39;s Rubicon • Posts by &#34;hexo&#34; tag</title>
        <link>https://rubicon.lightstands.xyz</link>
        <description></description>
        <language>zh-cn,en,default</language>
        <pubDate>Thu, 30 Dec 2021 21:26:06 +0000</pubDate>
        <lastBuildDate>Thu, 30 Dec 2021 21:26:06 +0000</lastBuildDate>
        <category>Hexo</category>
        <category>logbook</category>
        <category>博客功能更新</category>
        <category>文摘</category>
        <category>社会科学</category>
        <category>RSS</category>
        <category>Makru</category>
        <category>C</category>
        <category>系列文章</category>
        <category>Kache Development</category>
        <category>Kache</category>
        <category>网络</category>
        <category>诗集</category>
        <category>Linux记</category>
        <category>生命很短</category>
        <category>年终总结</category>
        <item>
            <guid isPermalink="true">https://rubicon.lightstands.xyz/2021/12/30/Blog-2021-Final-Update/</guid>
            <title>博客2021年最终功能更新</title>
            <link>https://rubicon.lightstands.xyz/2021/12/30/Blog-2021-Final-Update/</link>
            <category>Hexo</category>
            <category>logbook</category>
            <category>博客功能更新</category>
            <pubDate>Thu, 30 Dec 2021 21:26:06 +0000</pubDate>
            <description><![CDATA[ &lt;p&gt;我对博客功能的要求是拒绝花里胡哨，一切为阅读服务。现在是2021年年底，正好我要为我对年终总结的一些设想给博客更新一些功能：快速引用素材、Steam游戏卡片、引用Wikipedia条目。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;快速引用素材&#34;&gt;&lt;a href=&#34;#快速引用素材&#34; class=&#34;headerlink&#34; title=&#34;快速引用素材&#34;&gt;&lt;/a&gt;快速引用素材&lt;/h2&gt;&lt;p&gt;之前我引用图片一直都是用图片的完整路径，实在是非常麻烦，所以我一直期待能找到一个简单的方法引用素材。原先的考虑是用&lt;a href=&#34;https://github.com/cnzsb/hexo-asset&#34;&gt;hexo-asset&lt;/a&gt;，但是在一番简单搜索后发现hexo-render-marked在3.1.0+已经携带了类似功能了：&lt;a href=&#34;https://hexo.io/docs/asset-folders.html#Embedding-an-image-using-markdown&#34;&gt;https://hexo.io/docs/asset-folders.html#Embedding-an-image-using-markdown&lt;/a&gt; 。直接在_config.yml里打开就行。&lt;/p&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;post_asset_folder:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;marked:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;prependRoot:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;postAsset:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/2021/12/30/Blog-2021-Final-Update/mastodon_Elephant_Friend_Curious.png&#34; alt=&#34;测试用的可爱Mastodon&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Steam游戏卡片&#34;&gt;&lt;a href=&#34;#Steam游戏卡片&#34; class=&#34;headerlink&#34; title=&#34;Steam游戏卡片&#34;&gt;&lt;/a&gt;Steam游戏卡片&lt;/h2&gt;&lt;iframe src=&#34;https://store.steampowered.com/widget/22380/&#34; frameborder=&#34;0&#34; width=&#34;100%&#34; height=&#34;190&#34;&gt;&lt;/iframe&gt;

&lt;iframe src=&#34;https://store.steampowered.com/widget/412020/?t=《地铁：离乡》确实是非常不错的半开放世界线性流程FPS。&#34; frameborder=&#34;0&#34; width=&#34;100%&#34; height=&#34;190&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;搜刮到&lt;a href=&#34;https://github.com/HCLonely/hexo-tag-steamgame&#34;&gt;hexo-tag-steamgames&lt;/a&gt;可以实现这个。&lt;/p&gt;
&lt;h2 id=&#34;引用Wikipedia条目&#34;&gt;&lt;a href=&#34;#引用Wikipedia条目&#34; class=&#34;headerlink&#34; title=&#34;引用Wikipedia条目&#34;&gt;&lt;/a&gt;引用Wikipedia条目&lt;/h2&gt;&lt;blockquote id=&#39;wikipedia-73772&#39;&gt;&lt;script&gt;
      window.addEventListener(&#39;load&#39;, function() {
        var element = document.getElementById(&#39;wikipedia-73772&#39;);
        var req = new XMLHttpRequest();
        req.addEventListener(&#34;load&#34;, function() {
          var result = this.response;
          const extract = result.extract;
          element.prepend(extract);
        });
        req.addEventListener(&#34;error&#34;, function() {
          element.prepend(&#39;Failed to fetch wikipedia data for &#34;Wikipedia&#34;.&#39;);
        });
        req.open(&#39;GET&#39;, &#39;https://zh.wikipedia.org/api/rest_v1/page/summary/Wikipedia?redirect=false&#39;);
        req.responseType = &#39;json&#39;;
        req.setRequestHeader(&#39;accept&#39;, &#39;application/json; charset=utf-8; profile=&#34;https://www.mediawiki.org/wiki/Specs/Summary/1.4.2&#34;&#39;);
        req.setRequestHeader(&#39;api-user-agent&#39;, &#39;Hexo Wikipedia Tag (from https://rubicon.lightstands.xyz)&#39;);
        req.send();
      });
    &lt;/script&gt;&lt;p&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/Wikipedia&#34;&gt;Wikipedia:Wikipedia&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;原来我是想用&lt;a href=&#34;https://github.com/tuanna-hsp/hexo-tag-wikipedia&#34;&gt;hexo-tag-wikipedia&lt;/a&gt;。但是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;这个插件用的不是新的Restful API，实际获取到的字符串千奇百怪。&lt;/li&gt;
&lt;li&gt;这东西一开始用不了，我一看控制台发现一串&lt;code&gt;$.getJSON&lt;/code&gt;：它插入的脚本用的JQuery的API。然而我的网页上并没有JQuery。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最后我改了一下把它改成用XMLHTTPRequest从&lt;a href=&#34;https://en.wikipedia.org/api/rest_v1/#/&#34;&gt;Wikipedia的Restful API&lt;/a&gt;拉取数据。脚本很简单：&lt;/p&gt;
&lt;figure class=&#34;highlight zephir&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;buildArgsHash&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; argsHash = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    args.forEach(arg =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; params = arg.split(&lt;span class=&#34;string&#34;&gt;&amp;#x27;:&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        argsHash[params[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]] = params[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; argsHash;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;generateWikipediaTagHtml&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(args, content)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; argsHash = buildArgsHash(args);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; title = argsHash[&lt;span class=&#34;string&#34;&gt;&amp;#x27;title&amp;#x27;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; lang = argsHash[&lt;span class=&#34;string&#34;&gt;&amp;#x27;lang&amp;#x27;&lt;/span&gt;] !== &lt;span class=&#34;keyword&#34;&gt;undefined&lt;/span&gt; ? argsHash[&lt;span class=&#34;string&#34;&gt;&amp;#x27;lang&amp;#x27;&lt;/span&gt;] : &lt;span class=&#34;string&#34;&gt;&amp;#x27;en&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; baseUrl = `https:&lt;span class=&#34;comment&#34;&gt;//$&amp;#123;lang&amp;#125;.wikipedia.org`;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; url = `$&amp;#123;baseUrl&amp;#125;/api/rest_v1/page/summary/$&amp;#123;title&amp;#125;?redirect=&lt;span class=&#34;keyword&#34;&gt;false&lt;/span&gt;`;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; tagId = Math.round(Math.random() * &lt;span class=&#34;number&#34;&gt;100000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; embeddedScript = `&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      window.addEventListener(&lt;span class=&#34;string&#34;&gt;&amp;#x27;load&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; element = document.getElementById(&lt;span class=&#34;string&#34;&gt;&amp;#x27;$&amp;#123;tagId&amp;#125;&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; req = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; XMLHttpRequest();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        req.addEventListener(&lt;span class=&#34;string&#34;&gt;&amp;quot;load&amp;quot;&lt;/span&gt;, &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; result = this.response;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; extract = result.extract;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          element.prepend(extract);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        req.addEventListener(&lt;span class=&#34;string&#34;&gt;&amp;quot;error&amp;quot;&lt;/span&gt;, &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          element.prepend(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Failed to fetch wikipedia data for &amp;quot;$&amp;#123;title&amp;#125;&amp;quot;.&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        req.open(&lt;span class=&#34;string&#34;&gt;&amp;#x27;GET&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;$&amp;#123;url&amp;#125;&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        req.responseType = &lt;span class=&#34;string&#34;&gt;&amp;#x27;json&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        req.setRequestHeader(&lt;span class=&#34;string&#34;&gt;&amp;#x27;accept&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;application/json; charset=utf-8; profile=&amp;quot;https://www.mediawiki.org/wiki/Specs/Summary/1.4.2&amp;quot;&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        req.send();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    `;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; contentText = `&amp;lt;script&amp;gt;$&amp;#123;embeddedScript&amp;#125;&amp;lt;/script&amp;gt;`;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (argsHash[&lt;span class=&#34;string&#34;&gt;&amp;#x27;wikiButton&amp;#x27;&lt;/span&gt;] === &lt;span class=&#34;string&#34;&gt;&amp;#x27;true&amp;#x27;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        contentText += `&amp;lt;p&amp;gt;&amp;lt;a href=&lt;span class=&#34;string&#34;&gt;&amp;quot;$&amp;#123;baseUrl&amp;#125;/wiki/$&amp;#123;title&amp;#125;&amp;quot;&lt;/span&gt;&amp;gt;Wikipedia:$&amp;#123;title&amp;#125;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;`;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; `&amp;lt;blockquote id=&lt;span class=&#34;string&#34;&gt;&amp;#x27;$&amp;#123;tagId&amp;#125;&amp;#x27;&lt;/span&gt;&amp;gt;$&amp;#123;contentText&amp;#125;&amp;lt;/blockquote&amp;gt;`;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;hexo.extend.tag.register(&lt;span class=&#34;string&#34;&gt;&amp;#x27;wikipedia&amp;#x27;&lt;/span&gt;, generateWikipediaTagHtml);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;我把它塞到了我的fork里（ &lt;a href=&#34;https://github.com/thislight/hexo-tag-wikipedia&#34;&gt;https://github.com/thislight/hexo-tag-wikipedia&lt;/a&gt; ），找时间我可能问问作者再把它合并到上游，因为有一个breaking change。我打算后面把它改成在服务器上获取，这样动态插入一大段文字的体验挺糟糕，而且每一个访客都要获取一次有点滥用资源的意思。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://rubicon.lightstands.xyz/2021/10/13/hexo-topic-feeds/</guid>
            <title>Rubicon&#39;s Rubicon的RSS订阅功能介绍和技术细节</title>
            <link>https://rubicon.lightstands.xyz/2021/10/13/hexo-topic-feeds/</link>
            <category>Hexo</category>
            <category>RSS</category>
            <pubDate>Wed, 13 Oct 2021 18:36:53 +0000</pubDate>
            <description><![CDATA[ &lt;blockquote&gt;
&lt;p&gt;RSS（英文全称：RDF Site Summary 或 Really Simple Syndication[2]），中文译作簡易資訊聚合[3]，也称聚合内容[4]，是一種消息來源格式規範，用以聚合多個網站更新的內容並自動通知網站訂閱者。使用 RSS 後，網站訂閱者便無需再手動查看網站是否有新的內容，同時 RSS 可將多個網站更新的內容進行整合，以摘要的形式呈現，有助於訂閱者快速獲取重要信息，並選擇性地點閱查看。 ———— &lt;a href=&#34;https://zh.wikipedia.org/wiki/RSS&#34;&gt;RSS - Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;之前花了两天时间完成了这个功能，后来心血来潮在网站上看看时发现有bug。修好bug之后我觉得还是水一篇文章吧，否则博客开了一年都没什么内容。这篇文章主要就是介绍RSS订阅功能以及实现时的一些技术细节，如果想要扒我（包含这个功能）的主题或者借以参考的话，我过一段时间会把这个主题整理开源出来。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;Rubicon’s Rubicon同时支持全站订阅和按标签或目录订阅。全站订阅就在每个页面最下方的“Links”里面。&lt;/p&gt;
&lt;img src=&#34;/img/hexo-topic-feeds/site-feeds.png&#34; class=&#34;&#34; title=&#34;Feed (Atom) 和 Feed (RSS)&#34;&gt;

&lt;p&gt;目前为止，对于Rubicon’s Rubicon来说RSS和Atom订阅没有差别。&lt;/p&gt;
&lt;h2 id=&#34;按标签或目录订阅&#34;&gt;&lt;a href=&#34;#按标签或目录订阅&#34; class=&#34;headerlink&#34; title=&#34;按标签或目录订阅&#34;&gt;&lt;/a&gt;按标签或目录订阅&lt;/h2&gt;&lt;p&gt;通过菜单栏里的”Archives”或右边的”Tags”进入任意标签或目录的页面，在标题下面就有“FEED (Atom)”和“FEED (RSS)”。&lt;/p&gt;
&lt;img src=&#34;/img/hexo-topic-feeds/topic-feeds.png&#34; class=&#34;&#34; title=&#34;标题“诗集”下面有“FEED (Atom)”和“FEED (RSS)”&#34;&gt;

&lt;h2 id=&#34;技术细节&#34;&gt;&lt;a href=&#34;#技术细节&#34; class=&#34;headerlink&#34; title=&#34;技术细节&#34;&gt;&lt;/a&gt;技术细节&lt;/h2&gt;&lt;p&gt;Rubicon’s Rubicon基于静态博客生成器&lt;a href=&#34;https://hexo.io/&#34;&gt;Hexo&lt;/a&gt;构建，所以当然没法根据参数动态生成订阅文件。不过&lt;a href=&#34;https://github.com/sergeyzwezdin/hexo-feed&#34;&gt;hexo-feed&lt;/a&gt;这个插件支持按照标签或者目录生成订阅。我做了一些配置，然后在相应的页面引用（拼链接）就可以使用了。&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
