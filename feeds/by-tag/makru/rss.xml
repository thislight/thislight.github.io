<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Rubicon&#39;s Rubicon • Posts by &#34;makru&#34; tag</title>
        <link>https://rubicon.lightstands.xyz</link>
        <description></description>
        <language>zh-cn,en,default</language>
        <pubDate>Mon, 04 Jan 2021 18:49:20 +0000</pubDate>
        <lastBuildDate>Mon, 04 Jan 2021 18:49:20 +0000</lastBuildDate>
        <category>Hexo</category>
        <category>RSS</category>
        <category>Makru</category>
        <category>C</category>
        <category>系列文章</category>
        <category>Kache Development</category>
        <category>Kache</category>
        <category>网络</category>
        <category>诗集</category>
        <category>Linux记</category>
        <category>生命很短</category>
        <category>logbook</category>
        <item>
            <guid isPermalink="true">https://rubicon.lightstands.xyz/2021/01/04/makru-tutor-2/</guid>
            <title>使用Makru和makru_langc管理现代C项目编译： 配置Makru和makru_langc</title>
            <link>https://rubicon.lightstands.xyz/2021/01/04/makru-tutor-2/</link>
            <category>Makru</category>
            <category>C</category>
            <pubDate>Mon, 04 Jan 2021 18:49:20 +0000</pubDate>
            <description><![CDATA[ &lt;p&gt;在这一篇文章中，我会介绍makru_langc的安装。和普通的编译工具不同，makru_langc是作为Makru的一个插件安装的，而Makru的插件只能安装到项目上随项目源代码附带。这会带来一些不方便，但是能够保证每一个项目都能选择最适合的插件和插件版本而无需担心兼容成本。其实类似的方法在make和cmake的项目中也能经常看见，很多项目都会带有一些脚本或者预定义宏来帮助编译，只是Makru将它变成强制行为了。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;这是一篇属于“使用Makru和makru_langc管理现代C项目编译”系列的文章，你可以在&lt;a href=&#34;/2020/12/26/makru-tutor-1/&#34; title=&#34;使用Makru和makru_langc管理现代C项目编译：引入&amp;amp;目录&#34;&gt;使用Makru和makru_langc管理现代C项目编译：引入&amp;amp;目录&lt;/a&gt;找到目录。&lt;/p&gt;
&lt;p&gt;注意：makru_langc尚未考虑对于Windows的支持。&lt;/p&gt;
&lt;h2 id=&#34;安装Makru&#34;&gt;&lt;a href=&#34;#安装Makru&#34; class=&#34;headerlink&#34; title=&#34;安装Makru&#34;&gt;&lt;/a&gt;安装Makru&lt;/h2&gt;&lt;p&gt;Makru完全由Python编写而成，只需要你有Python。目前对于Python低版本的兼容性未知，但是你至少应该有3.6或更高版本的Python。我的环境使用的是Python 3.9.1。&lt;/p&gt;
&lt;p&gt;如果你不想在系统级别安装Makru，你可以使用&lt;a href=&#34;https://pypi.org/project/virtualenv/&#34;&gt;virtualenv&lt;/a&gt;创建一个目录级的Python虚拟环境。不过其实一般情况下你不需要这样做。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ pip install makru&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Collecting makru&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Downloading makru-0.1.0b14-py3-none-any.whl (12 kB)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Collecting semver&amp;lt;3.0.0,&amp;gt;=2.13.0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Downloading semver-2.13.0-py2.py3-none-any.whl (12 kB)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Collecting pluginbase&amp;lt;2.0.0,&amp;gt;=1.0.0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Downloading pluginbase-1.0.0.tar.gz (41 kB)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     |████████████████████████████████| 41 kB 573 kB/s &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Collecting PyYAML&amp;lt;6.0.0,&amp;gt;=5.1.1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Downloading PyYAML-5.3.1.tar.gz (269 kB)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     |████████████████████████████████| 269 kB 1.1 MB/s &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Building wheels for collected packages: pluginbase, PyYAML&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Building wheel for pluginbase (setup.py) ... done&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Created wheel for pluginbase: filename=pluginbase-1.0.0-py3-none-any.whl size=7747 sha256=7f4d815404165862e1c1a5544f115e566dd375355bb1caba1769b27be4d30f9a&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Stored in directory: /tmp/pip-ephem-wheel-cache-aisr91om/wheels/a6/31/1d/6f541ab6fdbb2e3fce5472e65c9769ecb782428d22d68ad938&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Building wheel for PyYAML (setup.py) ... done&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Created wheel for PyYAML: filename=PyYAML-5.3.1-cp39-cp39-linux_x86_64.whl size=44617 sha256=184ba6ba623bfa178270185f0afd6ba1ef695f08bb3f0298303ed87a665dc6e5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Stored in directory: /tmp/pip-ephem-wheel-cache-aisr91om/wheels/69/60/81/5cd74b8ee068fbe9e04ca0d53148f28f5c6e2c5b177d5dd622&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Successfully built pluginbase PyYAML&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Installing collected packages: semver, pluginbase, PyYAML, makru&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Successfully installed PyYAML-5.3.1 makru-0.1.0b14 pluginbase-1.0.0 semver-2.13.0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到Makru非常小，包含依赖在内只需要600KB左右。&lt;/p&gt;
&lt;p&gt;让我们随便运行一下：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ makru&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;panic: could not found /some/random/path/makru.yaml.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;好了，看起来Makru装好了。虽然它在抱怨在当前目录下面找不到配置文件，但是我们需要继续向前。配置文件是下一篇博文的问题。&lt;/p&gt;
&lt;h2 id=&#34;安装makru-langc&#34;&gt;&lt;a href=&#34;#安装makru-langc&#34; class=&#34;headerlink&#34; title=&#34;安装makru_langc&#34;&gt;&lt;/a&gt;安装makru_langc&lt;/h2&gt;&lt;p&gt;还记得在文章第一段我提到的事情吗？“Makru的插件只能安装在项目上随源代码附带”。其实意思就是说Makru不存在能在整个系统或用户上生效的插件，所有插件的作用范围仅限于该项目。所以我们并不需要真正地“安装”makru_langc，只需要将它放在指定的文件夹下面就会生效，默认情况下这个目录是&lt;code&gt;&amp;lt;你的项目&amp;gt;/makru/plugins&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;现在我们给我们即将到来的scat项目创建一个文件夹，就叫&lt;code&gt;makru-tutor&lt;/code&gt;。在文章里的完整路径是&lt;code&gt;/path/to/makru-tutor&lt;/code&gt;，所以我们的默认插件目录就是&lt;code&gt;/path/to/makru-tutor/makru/plugins&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;直接放置源代码安装&#34;&gt;&lt;a href=&#34;#直接放置源代码安装&#34; class=&#34;headerlink&#34; title=&#34;直接放置源代码安装&#34;&gt;&lt;/a&gt;直接放置源代码安装&lt;/h3&gt;&lt;p&gt;让我们直接开始吧！访问 &lt;a href=&#34;https://gitlab.com/jinwa/makru_langc&#34;&gt;makru_langc的仓库&lt;/a&gt;，点击下载按钮然后选择合适的压缩包格式。把里面包含&lt;code&gt;__init__.py&lt;/code&gt;的所有文件解压到&lt;code&gt;/path/to/makru-tutor/makru/plugins/makru_langc&lt;/code&gt;下。&lt;/p&gt;
&lt;img src=&#34;/img/makru-tutor/2/screenshot-download-makru-langc-source.png&#34; class=&#34;&#34; title=&#34;直接点击页面上很明显的下载按钮就可以选择压缩包格式了&#34;&gt;

&lt;p&gt;列出makru_langc文件夹的文件列表，要看见&lt;code&gt;__init__.py&lt;/code&gt;才是正确的放法：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ ls /path/to/makru-tutor/makru/plugins/makru_langc&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;__init__.py&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...其它文件&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这样就安装好了！&lt;/p&gt;
&lt;p&gt;但这篇文章还不应该结束，设想一下：大部分情况下升级插件都不会破坏兼容性，如果你想要享受最新功能和bug修复，每一次更新你都重复下载-解压的操作，这种重复性的操作让人感觉不便。我们还需要一个新的方案。&lt;br&gt;如果你使用Git来管理你的项目，这里有一个更方便的方法：Git子模块。&lt;/p&gt;
&lt;h3 id=&#34;通过Git子模块安装&#34;&gt;&lt;a href=&#34;#通过Git子模块安装&#34; class=&#34;headerlink&#34; title=&#34;通过Git子模块安装&#34;&gt;&lt;/a&gt;通过Git子模块安装&lt;/h3&gt;&lt;p&gt;让我们看看Git子模块的简单解释：&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;有种情况我们经常会遇到：某个工作中的项目需要包含并使用另一个项目。 也许是第三方库，或者你独立开发的，用于多个父项目的库。 现在问题来了：你想要把它们当做两个独立的项目，同时又想在一个项目中使用另一个。&lt;/p&gt;
&lt;p&gt;我们举一个例子。 假设你正在开发一个网站然后创建了 Atom 订阅。 你决定使用一个库，而不是写自己的 Atom 生成代码。 你可能不得不通过 CPAN 安装或 Ruby gem 来包含共享库中的代码，或者将源代码直接拷贝到自己的项目中。 如果将这个库包含进来，那么无论用何种方式都很难定制它，部署则更加困难，因为你必须确保每一个客户端都包含该库。 如果将代码复制到自己的项目中，那么你做的任何自定义修改都会使合并上游的改动变得困难。&lt;/p&gt;
&lt;p&gt;Git 通过子模块来解决这个问题。 子模块允许你将一个 Git 仓库作为另一个 Git 仓库的子目录。 它能让你将另一个仓库克隆到自己的项目中，同时还保持提交的独立。&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;Pro Git, the 2nd edition&lt;/strong&gt;&lt;cite&gt;&lt;a href=&#34;https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97&#34;&gt;7.11 Git 工具 - 子模块&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;

&lt;p&gt;这正是我们需要的！实话说，我在使用Git两三年之后才接触到这个特性，我相信很多人从来没使用过它。不过它确实在一些情况下很有用，比如现在我们的情况。&lt;/p&gt;
&lt;p&gt;好吧，废话少说。如果你需要Git的子模块功能的话你需要先把目录变成一个仓库。我们可以使用Git的魔法咒语来完成这件事：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ git init&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;已初始化空的 Git 仓库于 /path/to/makru-tutor/.git/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;然后再使用一个魔法咒语（你不需要自己手动创建&lt;code&gt;makru/plugins&lt;/code&gt;文件夹，Git会帮你打理好这些）：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ git submodule add https://gitlab.com/jinwa/makru_langc.git makru/plugins/makru_langc&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;正克隆到 &amp;#x27;/path/to/makru-tutor/makru/plugins/makru_langc&amp;#x27;...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;remote: Enumerating objects: 244, done.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;remote: Counting objects: 100% (244/244), done.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;remote: Compressing objects: 100% (137/137), done.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;remote: Total 250 (delta 145), reused 183 (delta 104), pack-reused 6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;接收对象中: 100% (250/250), 43.23 KiB | 48.00 KiB/s, 完成.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;处理 delta 中: 100% (146/146), 完成.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;然后就可以在相应目录下看到我们的插件：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ ls /path/to/makru-tutor/makru/plugins/makru_langc&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;__init__.py&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...其它文件&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;（如果你有过Python编程的经验，到这里你应该就明白为何makru_langc要采取这种奇怪的项目布局了）&lt;/p&gt;
&lt;p&gt;但是到这里事情还没完，我们还需要一个提交把我们的子模块放进树里。如果你需要了解Git，你可以看看上面引用的那本《Pro Git》，这本书有中文翻译。&lt;br&gt;现在运行&lt;code&gt;git status&lt;/code&gt;会多出来两个东西：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ git status&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;位于分支 master&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;尚无提交&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;要提交的变更：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  （使用 &amp;quot;git rm --cached &amp;lt;文件&amp;gt;...&amp;quot; 以取消暂存）&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        新文件：   .gitmodules&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        新文件：   makru/plugins/makru_langc&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;要提交变更可以这样做：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;git commit -m&amp;quot;随意产生的无意义信息（不&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;所以我要这样：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ git commit -m&amp;quot;add makru_langc to makru-tutor&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[master（根提交） 0ed585d] add makru_langc to makru-tutor&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 2 files changed, 4 insertions(+)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; create mode 100644 .gitmodules&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; create mode 160000 makru/plugins/makru_langc&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后安装就完成了！&lt;/p&gt;
&lt;p&gt;不过，到这里我们仅仅是“做了件事”安装了Makru和makru_langc，还没看到任何反馈。别担心，下一篇文章里我们就会得到点反馈了。&lt;/p&gt;
&lt;p&gt;下一篇文章：为可执行文件项目编写配置文件&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://rubicon.lightstands.xyz/2020/12/26/makru-tutor-1/</guid>
            <title>使用Makru和makru_langc管理现代C项目编译：引入&amp;目录</title>
            <link>https://rubicon.lightstands.xyz/2020/12/26/makru-tutor-1/</link>
            <category>Makru</category>
            <category>C</category>
            <category>系列文章</category>
            <pubDate>Sat, 26 Dec 2020 21:21:13 +0000</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;a href=&#34;https://gitlab.com/jinwa/makru&#34;&gt;Makru&lt;/a&gt;是一个用Python编写的全新编译工具。它的目的不是提供更多的编译逻辑，而是提供一个统一的平台方便开发和引入新的编译逻辑。Makru和目前主流的make-like编译系统最大的不同点再于：它没有使用类似宏语法之类的东西为配置文件提供超高的灵活性，而是直接选择了很多现代包管理工具正在使用的结构化数据配置文件（Makru使用的是yaml）。&lt;a href=&#34;https://gitlab.com/jinwa/makru_langc&#34;&gt;makru_langc&lt;/a&gt;就是在它之上构建的C语言项目编译插件。&lt;br&gt;得益于这样的选择，makru_langc提供了非常流畅的编译管理体验。你可以快速理解并编辑配置文件，而不是在配置文件的海洋里晕头转向。另外，makru_langc还支持高自由度的自定义，你甚至可以利用它提供的工具编写自己的编译逻辑。&lt;/p&gt;
&lt;p&gt;这个文章系列将会介绍一个用makru_langc来管理编译的小演示项目scat，它接收标准输入然后输出到标准输出。为了演示makru_langc的功能，scat会有一个子项目叫libcopy。这个子项目里只有一个函数：从第一个File输入，输出到第二个File。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;makru_langc还自带直接从本地pkgconfig查询第三方库的功能，最后一篇文章会覆盖到这个特性，并以此说明如何为makru_langc编写自己的库查询逻辑。&lt;/p&gt;
&lt;h2 id=&#34;环境说明&#34;&gt;&lt;a href=&#34;#环境说明&#34; class=&#34;headerlink&#34; title=&#34;环境说明&#34;&gt;&lt;/a&gt;环境说明&lt;/h2&gt;&lt;p&gt;文章中的开发环境是运行于Linux 5.9.15 x86_64之上的Fedora 33，Python 3.9以及Clang 11.0。Makru的版本是v0.1.0（最新beta版本），makru_langc的版本是尚未发布的r1（你可以直接检出master分支）。&lt;/p&gt;
&lt;h2 id=&#34;目录&#34;&gt;&lt;a href=&#34;#目录&#34; class=&#34;headerlink&#34; title=&#34;目录&#34;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/2021/01/04/makru-tutor-2/&#34; title=&#34;配置Makru和makru_langc&#34;&gt;配置Makru和makru_langc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;为可执行文件项目编写配置文件&lt;/li&gt;
&lt;li&gt;为库项目编写配置文件&lt;/li&gt;
&lt;li&gt;使用Pkgconfig Dependency Resolver引入第三方库&lt;/li&gt;
&lt;li&gt;makru_langc的基本工作流程&lt;/li&gt;
&lt;li&gt;编写一个基于命令行输入的Dependency Resolver&lt;/li&gt;
&lt;li&gt;makru_langc代码阅读指引&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
    </channel>
</rss>
