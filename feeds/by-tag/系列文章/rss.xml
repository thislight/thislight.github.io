<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Rubicon&#39;s Rubicon • Posts by &#34;系列文章&#34; tag</title>
        <link>https://rubicon.lightstands.xyz</link>
        <description></description>
        <language>zh-cn,en,default</language>
        <pubDate>Sat, 26 Dec 2020 21:21:13 +0000</pubDate>
        <lastBuildDate>Sat, 26 Dec 2020 21:21:13 +0000</lastBuildDate>
        <category>Hexo</category>
        <category>logbook</category>
        <category>博客功能更新</category>
        <category>文摘</category>
        <category>社会科学</category>
        <category>RSS</category>
        <category>Makru</category>
        <category>C</category>
        <category>系列文章</category>
        <category>Kache Development</category>
        <category>Kache</category>
        <category>网络</category>
        <category>诗集</category>
        <category>Linux记</category>
        <category>生命很短</category>
        <category>年终总结</category>
        <item>
            <guid isPermalink="true">https://rubicon.lightstands.xyz/2020/12/26/makru-tutor-1/</guid>
            <title>使用Makru和makru_langc管理现代C项目编译：引入&amp;目录</title>
            <link>https://rubicon.lightstands.xyz/2020/12/26/makru-tutor-1/</link>
            <category>Makru</category>
            <category>C</category>
            <category>系列文章</category>
            <pubDate>Sat, 26 Dec 2020 21:21:13 +0000</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;a href=&#34;https://gitlab.com/jinwa/makru&#34;&gt;Makru&lt;/a&gt;是一个用Python编写的全新编译工具。它的目的不是提供更多的编译逻辑，而是提供一个统一的平台方便开发和引入新的编译逻辑。Makru和目前主流的make-like编译系统最大的不同点再于：它没有使用类似宏语法之类的东西为配置文件提供超高的灵活性，而是直接选择了很多现代包管理工具正在使用的结构化数据配置文件（Makru使用的是yaml）。&lt;a href=&#34;https://gitlab.com/jinwa/makru_langc&#34;&gt;makru_langc&lt;/a&gt;就是在它之上构建的C语言项目编译插件。&lt;br&gt;得益于这样的选择，makru_langc提供了非常流畅的编译管理体验。你可以快速理解并编辑配置文件，而不是在配置文件的海洋里晕头转向。另外，makru_langc还支持高自由度的自定义，你甚至可以利用它提供的工具编写自己的编译逻辑。&lt;/p&gt;
&lt;p&gt;这个文章系列将会介绍一个用makru_langc来管理编译的小演示项目scat，它接收标准输入然后输出到标准输出。为了演示makru_langc的功能，scat会有一个子项目叫libcopy。这个子项目里只有一个函数：从第一个File输入，输出到第二个File。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;makru_langc还自带直接从本地pkgconfig查询第三方库的功能，最后一篇文章会覆盖到这个特性，并以此说明如何为makru_langc编写自己的库查询逻辑。&lt;/p&gt;
&lt;h2 id=&#34;环境说明&#34;&gt;&lt;a href=&#34;#环境说明&#34; class=&#34;headerlink&#34; title=&#34;环境说明&#34;&gt;&lt;/a&gt;环境说明&lt;/h2&gt;&lt;p&gt;文章中的开发环境是运行于Linux 5.9.15 x86_64之上的Fedora 33，Python 3.9以及Clang 11.0。Makru的版本是v0.1.0（最新beta版本），makru_langc的版本是尚未发布的r1（你可以直接检出master分支）。&lt;/p&gt;
&lt;h2 id=&#34;目录&#34;&gt;&lt;a href=&#34;#目录&#34; class=&#34;headerlink&#34; title=&#34;目录&#34;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/2021/01/04/makru-tutor-2/&#34; title=&#34;配置Makru和makru_langc&#34;&gt;配置Makru和makru_langc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;为可执行文件项目编写配置文件&lt;/li&gt;
&lt;li&gt;为库项目编写配置文件&lt;/li&gt;
&lt;li&gt;使用Pkgconfig Dependency Resolver引入第三方库&lt;/li&gt;
&lt;li&gt;makru_langc的基本工作流程&lt;/li&gt;
&lt;li&gt;编写一个基于命令行输入的Dependency Resolver&lt;/li&gt;
&lt;li&gt;makru_langc代码阅读指引&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
    </channel>
</rss>
