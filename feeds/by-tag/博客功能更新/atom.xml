<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://rubicon.lightstands.xyz</id>
    <title>Rubicon&#39;s Rubicon • Posts by &#34;博客功能更新&#34; tag</title>
    <link href="https://rubicon.lightstands.xyz" />
    <updated>2024-01-11T11:36:34.000Z</updated>
    <category term="Hexo" />
    <category term="logbook" />
    <category term="博客功能更新" />
    <category term="Flutter" />
    <category term="Dart" />
    <category term="前端开发" />
    <category term="小说" />
    <category term="文摘" />
    <category term="社会科学" />
    <category term="RSS" />
    <category term="诗集" />
    <category term="Makru" />
    <category term="C" />
    <category term="系列文章" />
    <category term="Kache Development" />
    <category term="Kache" />
    <category term="网络" />
    <category term="Linux记" />
    <category term="生命很短" />
    <category term="LightStands" />
    <category term="高性能I/O" />
    <category term="年终总结" />
    <entry>
        <id>https://rubicon.lightstands.xyz/2024/01/11/New-Theme-for-Blog-at-the-start-of-2024/</id>
        <title>新年新主题！博客新主题Buck介绍</title>
        <link rel="alternate" href="https://rubicon.lightstands.xyz/2024/01/11/New-Theme-for-Blog-at-the-start-of-2024/"/>
        <content type="html">&lt;p&gt;请允许我隆重介绍本博客的新主题——Buck！跟原先一样，这是一个老Material Design风格的主题。Buck从头开始设计，重写了所有样式和代码，加入了新的考量和原则。让我自豪地在这里为你介绍一下Buck带来的改进和变化。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;平平淡淡不是真&#34;&gt;&lt;a href=&#34;#平平淡淡不是真&#34; class=&#34;headerlink&#34; title=&#34;平平淡淡不是真&#34;&gt;&lt;/a&gt;平平淡淡不是真&lt;/h2&gt;&lt;p&gt;如果你曾经访问过我的博客，你很可能会感觉本博客的设计非常素。低情商一点，可以说很无聊。旧的CMD（Classic Material Design）主题中，强调色几乎不存在，而且字体大小非常保守，元素又缺乏变化。在我的实际体验中，这样的问题使得不同元素之间缺乏对比，页面缺少“锚点”抓住眼球，显得很平淡。&lt;/p&gt;
&lt;p&gt;有人说“平平淡淡”才是真，但是！在阅读长篇文章的时候，如果没有一些奇怪的东西打扰你的眼睛，很有可能你就会睡着了。说实话，我在看《编译原理》的时候就睡着过好几回，所以我想要偶尔有一些醒目的东西。当我将h1到h6元素映射到Material Desgin Typography的Display4到Title的时候，我发现效果意外的好：它就像直接拍到我的脸上。我的视线在Display4切换到主要文字的Body1时甚至需要重新对焦，但它又不会特别恼人。文章的展示意外地有了足够的层次感。&lt;/p&gt;
&lt;p&gt;颜色也是一种对比。博客原本就有一个粉色的强调色，但是非常非常少用，因为我也不知道怎么放。这次我想到了一个好主意：将有超过一篇文章使用的标签用强调色标出。现在主页终于不再是蓝色、白色和黑色了。当然，主题色也做了一些调整：蓝色变深了，提高了与白色的对比度。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2024/01/11/New-Theme-for-Blog-at-the-start-of-2024/tags-new-ui.png&#34; alt=&#34;新的标签列表卡片&#34;&gt;&lt;/p&gt;
&lt;p&gt;除此之外，当你将鼠标放到各种物件上时，都会有新的强调样式。在Buck中，我非常重视即时反馈，几乎每个物件都有自己的强调样式，包括代码块、块引用，甚至列表和表格。在文章中，各种物件的样式不再使用浏览器样式，而是使用接近Material Design的样式，看起来更漂亮了。&lt;/p&gt;
&lt;div class=&#34;table-responsive&#34; data-buck-baked=&#34;true&#34;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;
&lt;th&gt;物件&lt;/th&gt;
&lt;th&gt;基本反馈&lt;/th&gt;
&lt;th&gt;增强反馈&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;代码块&lt;/td&gt;
&lt;td&gt;有&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;块引用&lt;/td&gt;
&lt;td&gt;有&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;列表&lt;/td&gt;
&lt;td&gt;有&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;表格&lt;/td&gt;
&lt;td&gt;有&lt;/td&gt;
&lt;td&gt;有&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;图片&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;标签 Chip&lt;/td&gt;
&lt;td&gt;有&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;卡片&lt;/td&gt;
&lt;td&gt;有&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;链接&lt;/td&gt;
&lt;td&gt;有&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;与此同时，Buck能更充分地利用屏幕空间，不再像CMD一样将页面主题的宽度限制得太小。首页的内容不再挤在中间显示，而文章也有更大的空间舒展文字。&lt;/p&gt;
&lt;h2 id=&#34;渐进式增强网页&#34;&gt;&lt;a href=&#34;#渐进式增强网页&#34; class=&#34;headerlink&#34; title=&#34;渐进式增强网页&#34;&gt;&lt;/a&gt;渐进式增强网页&lt;/h2&gt;&lt;p&gt;Buck的JS、CSS以及其它资源现在使用esbuild打包。得益于打包工具的魔法，我能够轻易为Buck的网页进行“渐进式增强”。简单来说，“渐进式增强”就是在条件允许的时候提供相应的功能，在条件不允许的时候也有一个备用方案，而不是简单地告诉用户页面无法使用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2024/01/11/New-Theme-for-Blog-at-the-start-of-2024/table-enhanced-react-showcase.png&#34; alt=&#34;表格的增强反馈：鼠标在某一列停留时，相应列的标题会亮起&#34;&gt;&lt;/p&gt;
&lt;p&gt;当你在表格的某一列的一个单元格停留时，相应列的标题就会亮起，这个效果使用了JavaScript来实现。所以当你关闭JavaScript的时候，这个效果就会消失，但是页面仍然能够观看。&lt;/p&gt;
&lt;p&gt;除此之外，还有数个地方使用了JavaScript增强效果。我还准备实现一个图片全屏显示工具，得益于全新的代码架构，这个目的比之前更容易完成&lt;code&gt;:)&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;可及性（Accessibility）&#34;&gt;&lt;a href=&#34;#可及性（Accessibility）&#34; class=&#34;headerlink&#34; title=&#34;可及性（Accessibility）&#34;&gt;&lt;/a&gt;可及性（Accessibility）&lt;/h2&gt;&lt;p&gt;相比CMD，Buck一定程度上优化了可及性。我有相当一部分精力放在了“减少触摸的二义性”上。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2024/01/11/New-Theme-for-Blog-at-the-start-of-2024/post-item-showcase.png&#34; alt=&#34;博客文章列表的一个项目，有两个地方被红圈圈了出来：标题和内容梗概中的一个链接&#34;&gt;&lt;/p&gt;
&lt;p&gt;在原先的CMD中，文章列表中的一个项目是一个纸片，点击这个纸片就会进入文章页面。这听起来是很棒的主意。但是，如果用户注意到这个纸片中内容梗概也包含可操作内容的话，就会产生二义性，用户难以预测触摸的结果。因为使用手指触发触摸屏会在屏幕上产生一个椭圆形的触摸区域：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;物理上：用户确实无法确定实际上点击了哪个位置。&lt;/li&gt;
&lt;li&gt;心理上：手指遮挡了触摸区域，增加了用户心理上的不确定。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所以，在Buck中，进入文章的点击区域被限制在了标题处，避开内容梗概内的可操作内容；同时，可点击区域也有明显的标识。避免这样的二义性后，触摸的结果就更容易被用户预测到。在其它地方的可操作内容中，我也会采取了增加空白等方式，以求减小这种二义性的影响，我个人认为效果还可以。&lt;/p&gt;
&lt;p&gt;除此之外，在键盘导航、颜色对比度、字体等方面，Buck相对CMD也有很多改进。&lt;/p&gt;
&lt;h2 id=&#34;漫漫长路&#34;&gt;&lt;a href=&#34;#漫漫长路&#34; class=&#34;headerlink&#34; title=&#34;漫漫长路&#34;&gt;&lt;/a&gt;漫漫长路&lt;/h2&gt;&lt;p&gt;开始一个新项目，也有点像在打RPG：最开始零级出厂、慢慢升级，中间有可能提前结局。Buck断断续续地写了快一年，终于有了点底子，但是还是有很多问题需要修正。如果大家发现了bug，还请多多包涵。我是在Webkit、Gecko和Chromium三家引擎上测试的，bug我大多已经发现了，只是需要时间修。但是，真的，我博客没写几篇，博客自己的代码倒是写了不少XD&lt;/p&gt;
&lt;p&gt;在2024年的开头能把它做出来，也许是好事开端的预兆？我是希望如此。&lt;/p&gt;
</content>
        <category term="Hexo" />
        <category term="博客功能更新" />
        <updated>2024-01-11T11:36:34.000Z</updated>
    </entry>
    <entry>
        <id>https://rubicon.lightstands.xyz/2021/12/30/Blog-2021-Final-Update/</id>
        <title>博客2021年最终功能更新</title>
        <link rel="alternate" href="https://rubicon.lightstands.xyz/2021/12/30/Blog-2021-Final-Update/"/>
        <content type="html">&lt;p&gt;我对博客功能的要求是拒绝花里胡哨，一切为阅读服务。现在是2021年年底，正好我要为我对年终总结的一些设想给博客更新一些功能：快速引用素材、Steam游戏卡片、引用Wikipedia条目。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;快速引用素材&#34;&gt;&lt;a href=&#34;#快速引用素材&#34; class=&#34;headerlink&#34; title=&#34;快速引用素材&#34;&gt;&lt;/a&gt;快速引用素材&lt;/h2&gt;&lt;p&gt;之前我引用图片一直都是用图片的完整路径，实在是非常麻烦，所以我一直期待能找到一个简单的方法引用素材。原先的考虑是用&lt;a href=&#34;https://github.com/cnzsb/hexo-asset&#34;&gt;hexo-asset&lt;/a&gt;，但是在一番简单搜索后发现hexo-render-marked在3.1.0+已经携带了类似功能了：&lt;a href=&#34;https://hexo.io/docs/asset-folders.html#Embedding-an-image-using-markdown&#34;&gt;https://hexo.io/docs/asset-folders.html#Embedding-an-image-using-markdown&lt;/a&gt; 。直接在_config.yml里打开就行。&lt;/p&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;post_asset_folder:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;marked:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;prependRoot:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;postAsset:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/2021/12/30/Blog-2021-Final-Update/mastodon_Elephant_Friend_Curious.png&#34; alt=&#34;测试用的可爱Mastodon&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Steam游戏卡片&#34;&gt;&lt;a href=&#34;#Steam游戏卡片&#34; class=&#34;headerlink&#34; title=&#34;Steam游戏卡片&#34;&gt;&lt;/a&gt;Steam游戏卡片&lt;/h2&gt;&lt;iframe src=&#34;https://store.steampowered.com/widget/22380/&#34; frameborder=&#34;0&#34; width=&#34;100%&#34; height=&#34;190&#34;&gt;&lt;/iframe&gt;

&lt;iframe src=&#34;https://store.steampowered.com/widget/412020/?t=《地铁：离乡》确实是非常不错的半开放世界线性流程FPS。&#34; frameborder=&#34;0&#34; width=&#34;100%&#34; height=&#34;190&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;搜刮到&lt;a href=&#34;https://github.com/HCLonely/hexo-tag-steamgame&#34;&gt;hexo-tag-steamgames&lt;/a&gt;可以实现这个。&lt;/p&gt;
&lt;h2 id=&#34;引用Wikipedia条目&#34;&gt;&lt;a href=&#34;#引用Wikipedia条目&#34; class=&#34;headerlink&#34; title=&#34;引用Wikipedia条目&#34;&gt;&lt;/a&gt;引用Wikipedia条目&lt;/h2&gt;&lt;blockquote&gt;undefined&lt;p&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/Wikipedia&#34;&gt;Wikipedia:Wikipedia&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;原来我是想用&lt;a href=&#34;https://github.com/tuanna-hsp/hexo-tag-wikipedia&#34;&gt;hexo-tag-wikipedia&lt;/a&gt;。但是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;这个插件用的不是新的Restful API，实际获取到的字符串千奇百怪。&lt;/li&gt;
&lt;li&gt;这东西一开始用不了，我一看控制台发现一串&lt;code&gt;$.getJSON&lt;/code&gt;：它插入的脚本用的JQuery的API。然而我的网页上并没有JQuery。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最后我改了一下把它改成用XMLHTTPRequest从&lt;a href=&#34;https://en.wikipedia.org/api/rest_v1/#/&#34;&gt;Wikipedia的Restful API&lt;/a&gt;拉取数据。脚本很简单：&lt;/p&gt;
&lt;figure class=&#34;highlight zephir&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;buildArgsHash&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; argsHash = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    args.forEach(arg =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; params = arg.split(&lt;span class=&#34;string&#34;&gt;&amp;#x27;:&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        argsHash[params[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]] = params[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; argsHash;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;generateWikipediaTagHtml&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(args, content)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; argsHash = buildArgsHash(args);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; title = argsHash[&lt;span class=&#34;string&#34;&gt;&amp;#x27;title&amp;#x27;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; lang = argsHash[&lt;span class=&#34;string&#34;&gt;&amp;#x27;lang&amp;#x27;&lt;/span&gt;] !== &lt;span class=&#34;keyword&#34;&gt;undefined&lt;/span&gt; ? argsHash[&lt;span class=&#34;string&#34;&gt;&amp;#x27;lang&amp;#x27;&lt;/span&gt;] : &lt;span class=&#34;string&#34;&gt;&amp;#x27;en&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; baseUrl = `https:&lt;span class=&#34;comment&#34;&gt;//$&amp;#123;lang&amp;#125;.wikipedia.org`;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; url = `$&amp;#123;baseUrl&amp;#125;/api/rest_v1/page/summary/$&amp;#123;title&amp;#125;?redirect=&lt;span class=&#34;keyword&#34;&gt;false&lt;/span&gt;`;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; tagId = Math.round(Math.random() * &lt;span class=&#34;number&#34;&gt;100000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; embeddedScript = `&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      window.addEventListener(&lt;span class=&#34;string&#34;&gt;&amp;#x27;load&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; element = document.getElementById(&lt;span class=&#34;string&#34;&gt;&amp;#x27;$&amp;#123;tagId&amp;#125;&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; req = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; XMLHttpRequest();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        req.addEventListener(&lt;span class=&#34;string&#34;&gt;&amp;quot;load&amp;quot;&lt;/span&gt;, &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; result = this.response;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; extract = result.extract;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          element.prepend(extract);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        req.addEventListener(&lt;span class=&#34;string&#34;&gt;&amp;quot;error&amp;quot;&lt;/span&gt;, &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          element.prepend(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Failed to fetch wikipedia data for &amp;quot;$&amp;#123;title&amp;#125;&amp;quot;.&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        req.open(&lt;span class=&#34;string&#34;&gt;&amp;#x27;GET&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;$&amp;#123;url&amp;#125;&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        req.responseType = &lt;span class=&#34;string&#34;&gt;&amp;#x27;json&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        req.setRequestHeader(&lt;span class=&#34;string&#34;&gt;&amp;#x27;accept&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;application/json; charset=utf-8; profile=&amp;quot;https://www.mediawiki.org/wiki/Specs/Summary/1.4.2&amp;quot;&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        req.send();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    `;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; contentText = `&amp;lt;script&amp;gt;$&amp;#123;embeddedScript&amp;#125;&amp;lt;/script&amp;gt;`;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (argsHash[&lt;span class=&#34;string&#34;&gt;&amp;#x27;wikiButton&amp;#x27;&lt;/span&gt;] === &lt;span class=&#34;string&#34;&gt;&amp;#x27;true&amp;#x27;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        contentText += `&amp;lt;p&amp;gt;&amp;lt;a href=&lt;span class=&#34;string&#34;&gt;&amp;quot;$&amp;#123;baseUrl&amp;#125;/wiki/$&amp;#123;title&amp;#125;&amp;quot;&lt;/span&gt;&amp;gt;Wikipedia:$&amp;#123;title&amp;#125;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;`;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; `&amp;lt;blockquote id=&lt;span class=&#34;string&#34;&gt;&amp;#x27;$&amp;#123;tagId&amp;#125;&amp;#x27;&lt;/span&gt;&amp;gt;$&amp;#123;contentText&amp;#125;&amp;lt;/blockquote&amp;gt;`;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;hexo.extend.tag.register(&lt;span class=&#34;string&#34;&gt;&amp;#x27;wikipedia&amp;#x27;&lt;/span&gt;, generateWikipediaTagHtml);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;我把它塞到了我的fork里（ &lt;a href=&#34;https://github.com/thislight/hexo-tag-wikipedia&#34;&gt;https://github.com/thislight/hexo-tag-wikipedia&lt;/a&gt; ），找时间我可能问问作者再把它合并到上游，因为有一个breaking change。我打算后面把它改成在服务器上获取，这样动态插入一大段文字的体验挺糟糕，而且每一个访客都要获取一次有点滥用资源的意思。&lt;/p&gt;
</content>
        <category term="Hexo" />
        <category term="logbook" />
        <category term="博客功能更新" />
        <updated>2021-12-30T13:26:06.000Z</updated>
    </entry>
    <entry>
        <id>https://rubicon.lightstands.xyz/2021/10/13/hexo-topic-feeds/</id>
        <title>Rubicon&#39;s Rubicon的RSS订阅功能介绍和技术细节</title>
        <link rel="alternate" href="https://rubicon.lightstands.xyz/2021/10/13/hexo-topic-feeds/"/>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;RSS（英文全称：RDF Site Summary 或 Really Simple Syndication[2]），中文译作簡易資訊聚合[3]，也称聚合内容[4]，是一種消息來源格式規範，用以聚合多個網站更新的內容並自動通知網站訂閱者。使用 RSS 後，網站訂閱者便無需再手動查看網站是否有新的內容，同時 RSS 可將多個網站更新的內容進行整合，以摘要的形式呈現，有助於訂閱者快速獲取重要信息，並選擇性地點閱查看。 ———— &lt;a href=&#34;https://zh.wikipedia.org/wiki/RSS&#34;&gt;RSS - Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;之前花了两天时间完成了这个功能，后来心血来潮在网站上看看时发现有bug。修好bug之后我觉得还是水一篇文章吧，否则博客开了一年都没什么内容。这篇文章主要就是介绍RSS订阅功能以及实现时的一些技术细节，如果想要扒我（包含这个功能）的主题或者借以参考的话，我过一段时间会把这个主题整理开源出来。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;Rubicon’s Rubicon同时支持全站订阅和按标签或目录订阅。全站订阅就在每个页面最下方的“Links”里面。&lt;/p&gt;
&lt;img src=&#34;/img/hexo-topic-feeds/site-feeds.png&#34; class=&#34;&#34; title=&#34;Feed (Atom) 和 Feed (RSS)&#34;&gt;

&lt;p&gt;目前为止，对于Rubicon’s Rubicon来说RSS和Atom订阅没有差别。&lt;/p&gt;
&lt;h2 id=&#34;按标签或目录订阅&#34;&gt;&lt;a href=&#34;#按标签或目录订阅&#34; class=&#34;headerlink&#34; title=&#34;按标签或目录订阅&#34;&gt;&lt;/a&gt;按标签或目录订阅&lt;/h2&gt;&lt;p&gt;通过菜单栏里的”Archives”或右边的”Tags”进入任意标签或目录的页面，在标题下面就有“FEED (Atom)”和“FEED (RSS)”。&lt;/p&gt;
&lt;img src=&#34;/img/hexo-topic-feeds/topic-feeds.png&#34; class=&#34;&#34; title=&#34;标题“诗集”下面有“FEED (Atom)”和“FEED (RSS)”&#34;&gt;

&lt;h2 id=&#34;技术细节&#34;&gt;&lt;a href=&#34;#技术细节&#34; class=&#34;headerlink&#34; title=&#34;技术细节&#34;&gt;&lt;/a&gt;技术细节&lt;/h2&gt;&lt;p&gt;Rubicon’s Rubicon基于静态博客生成器&lt;a href=&#34;https://hexo.io/&#34;&gt;Hexo&lt;/a&gt;构建，所以当然没法根据参数动态生成订阅文件。不过&lt;a href=&#34;https://github.com/sergeyzwezdin/hexo-feed&#34;&gt;hexo-feed&lt;/a&gt;这个插件支持按照标签或者目录生成订阅。我做了一些配置，然后在相应的页面引用（拼链接）就可以使用了。&lt;/p&gt;
</content>
        <category term="Hexo" />
        <category term="博客功能更新" />
        <category term="RSS" />
        <updated>2021-10-13T10:36:53.000Z</updated>
    </entry>
</feed>
