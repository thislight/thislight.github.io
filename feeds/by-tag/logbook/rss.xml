<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Rubicon&#39;s Rubicon • Posts by &#34;logbook&#34; tag</title>
        <link>https://rubicon.lightstands.xyz</link>
        <description></description>
        <language>zh-Hans</language>
        <pubDate>Thu, 30 Dec 2021 13:26:06 +0000</pubDate>
        <lastBuildDate>Thu, 30 Dec 2021 13:26:06 +0000</lastBuildDate>
        <category>Hexo</category>
        <category>logbook</category>
        <category>博客功能更新</category>
        <category>Flutter</category>
        <category>Dart</category>
        <category>前端开发</category>
        <category>小说</category>
        <category>文摘</category>
        <category>社会科学</category>
        <category>RSS</category>
        <category>诗集</category>
        <category>Makru</category>
        <category>C</category>
        <category>系列文章</category>
        <category>Kache Development</category>
        <category>Kache</category>
        <category>网络</category>
        <category>Linux记</category>
        <category>生命很短</category>
        <category>LightStands</category>
        <category>高性能I/O</category>
        <category>年终总结</category>
        <item>
            <guid isPermalink="true">https://rubicon.lightstands.xyz/2021/12/30/Blog-2021-Final-Update/</guid>
            <title>博客2021年最终功能更新</title>
            <link>https://rubicon.lightstands.xyz/2021/12/30/Blog-2021-Final-Update/</link>
            <category>Hexo</category>
            <category>logbook</category>
            <category>博客功能更新</category>
            <pubDate>Thu, 30 Dec 2021 13:26:06 +0000</pubDate>
            <description><![CDATA[ &lt;p&gt;我对博客功能的要求是拒绝花里胡哨，一切为阅读服务。现在是2021年年底，正好我要为我对年终总结的一些设想给博客更新一些功能：快速引用素材、Steam游戏卡片、引用Wikipedia条目。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;快速引用素材&#34;&gt;&lt;a href=&#34;#快速引用素材&#34; class=&#34;headerlink&#34; title=&#34;快速引用素材&#34;&gt;&lt;/a&gt;快速引用素材&lt;/h2&gt;&lt;p&gt;之前我引用图片一直都是用图片的完整路径，实在是非常麻烦，所以我一直期待能找到一个简单的方法引用素材。原先的考虑是用&lt;a href=&#34;https://github.com/cnzsb/hexo-asset&#34;&gt;hexo-asset&lt;/a&gt;，但是在一番简单搜索后发现hexo-render-marked在3.1.0+已经携带了类似功能了：&lt;a href=&#34;https://hexo.io/docs/asset-folders.html#Embedding-an-image-using-markdown&#34;&gt;https://hexo.io/docs/asset-folders.html#Embedding-an-image-using-markdown&lt;/a&gt; 。直接在_config.yml里打开就行。&lt;/p&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;post_asset_folder:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;marked:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;prependRoot:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;postAsset:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/2021/12/30/Blog-2021-Final-Update/mastodon_Elephant_Friend_Curious.png&#34; alt=&#34;测试用的可爱Mastodon&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Steam游戏卡片&#34;&gt;&lt;a href=&#34;#Steam游戏卡片&#34; class=&#34;headerlink&#34; title=&#34;Steam游戏卡片&#34;&gt;&lt;/a&gt;Steam游戏卡片&lt;/h2&gt;&lt;iframe src=&#34;https://store.steampowered.com/widget/22380/&#34; frameborder=&#34;0&#34; width=&#34;100%&#34; height=&#34;190&#34;&gt;&lt;/iframe&gt;

&lt;iframe src=&#34;https://store.steampowered.com/widget/412020/?t=《地铁：离乡》确实是非常不错的半开放世界线性流程FPS。&#34; frameborder=&#34;0&#34; width=&#34;100%&#34; height=&#34;190&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;搜刮到&lt;a href=&#34;https://github.com/HCLonely/hexo-tag-steamgame&#34;&gt;hexo-tag-steamgames&lt;/a&gt;可以实现这个。&lt;/p&gt;
&lt;h2 id=&#34;引用Wikipedia条目&#34;&gt;&lt;a href=&#34;#引用Wikipedia条目&#34; class=&#34;headerlink&#34; title=&#34;引用Wikipedia条目&#34;&gt;&lt;/a&gt;引用Wikipedia条目&lt;/h2&gt;&lt;blockquote&gt;undefined&lt;p&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/Wikipedia&#34;&gt;Wikipedia:Wikipedia&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;原来我是想用&lt;a href=&#34;https://github.com/tuanna-hsp/hexo-tag-wikipedia&#34;&gt;hexo-tag-wikipedia&lt;/a&gt;。但是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;这个插件用的不是新的Restful API，实际获取到的字符串千奇百怪。&lt;/li&gt;
&lt;li&gt;这东西一开始用不了，我一看控制台发现一串&lt;code&gt;$.getJSON&lt;/code&gt;：它插入的脚本用的JQuery的API。然而我的网页上并没有JQuery。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最后我改了一下把它改成用XMLHTTPRequest从&lt;a href=&#34;https://en.wikipedia.org/api/rest_v1/#/&#34;&gt;Wikipedia的Restful API&lt;/a&gt;拉取数据。脚本很简单：&lt;/p&gt;
&lt;figure class=&#34;highlight zephir&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;buildArgsHash&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; argsHash = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    args.forEach(arg =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; params = arg.split(&lt;span class=&#34;string&#34;&gt;&amp;#x27;:&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        argsHash[params[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]] = params[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; argsHash;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;generateWikipediaTagHtml&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(args, content)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; argsHash = buildArgsHash(args);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; title = argsHash[&lt;span class=&#34;string&#34;&gt;&amp;#x27;title&amp;#x27;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; lang = argsHash[&lt;span class=&#34;string&#34;&gt;&amp;#x27;lang&amp;#x27;&lt;/span&gt;] !== &lt;span class=&#34;keyword&#34;&gt;undefined&lt;/span&gt; ? argsHash[&lt;span class=&#34;string&#34;&gt;&amp;#x27;lang&amp;#x27;&lt;/span&gt;] : &lt;span class=&#34;string&#34;&gt;&amp;#x27;en&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; baseUrl = `https:&lt;span class=&#34;comment&#34;&gt;//$&amp;#123;lang&amp;#125;.wikipedia.org`;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; url = `$&amp;#123;baseUrl&amp;#125;/api/rest_v1/page/summary/$&amp;#123;title&amp;#125;?redirect=&lt;span class=&#34;keyword&#34;&gt;false&lt;/span&gt;`;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; tagId = Math.round(Math.random() * &lt;span class=&#34;number&#34;&gt;100000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; embeddedScript = `&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      window.addEventListener(&lt;span class=&#34;string&#34;&gt;&amp;#x27;load&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; element = document.getElementById(&lt;span class=&#34;string&#34;&gt;&amp;#x27;$&amp;#123;tagId&amp;#125;&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; req = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; XMLHttpRequest();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        req.addEventListener(&lt;span class=&#34;string&#34;&gt;&amp;quot;load&amp;quot;&lt;/span&gt;, &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; result = this.response;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; extract = result.extract;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          element.prepend(extract);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        req.addEventListener(&lt;span class=&#34;string&#34;&gt;&amp;quot;error&amp;quot;&lt;/span&gt;, &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          element.prepend(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Failed to fetch wikipedia data for &amp;quot;$&amp;#123;title&amp;#125;&amp;quot;.&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        req.open(&lt;span class=&#34;string&#34;&gt;&amp;#x27;GET&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;$&amp;#123;url&amp;#125;&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        req.responseType = &lt;span class=&#34;string&#34;&gt;&amp;#x27;json&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        req.setRequestHeader(&lt;span class=&#34;string&#34;&gt;&amp;#x27;accept&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;application/json; charset=utf-8; profile=&amp;quot;https://www.mediawiki.org/wiki/Specs/Summary/1.4.2&amp;quot;&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        req.send();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    `;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; contentText = `&amp;lt;script&amp;gt;$&amp;#123;embeddedScript&amp;#125;&amp;lt;/script&amp;gt;`;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (argsHash[&lt;span class=&#34;string&#34;&gt;&amp;#x27;wikiButton&amp;#x27;&lt;/span&gt;] === &lt;span class=&#34;string&#34;&gt;&amp;#x27;true&amp;#x27;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        contentText += `&amp;lt;p&amp;gt;&amp;lt;a href=&lt;span class=&#34;string&#34;&gt;&amp;quot;$&amp;#123;baseUrl&amp;#125;/wiki/$&amp;#123;title&amp;#125;&amp;quot;&lt;/span&gt;&amp;gt;Wikipedia:$&amp;#123;title&amp;#125;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;`;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; `&amp;lt;blockquote id=&lt;span class=&#34;string&#34;&gt;&amp;#x27;$&amp;#123;tagId&amp;#125;&amp;#x27;&lt;/span&gt;&amp;gt;$&amp;#123;contentText&amp;#125;&amp;lt;/blockquote&amp;gt;`;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;hexo.extend.tag.register(&lt;span class=&#34;string&#34;&gt;&amp;#x27;wikipedia&amp;#x27;&lt;/span&gt;, generateWikipediaTagHtml);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;我把它塞到了我的fork里（ &lt;a href=&#34;https://github.com/thislight/hexo-tag-wikipedia&#34;&gt;https://github.com/thislight/hexo-tag-wikipedia&lt;/a&gt; ），找时间我可能问问作者再把它合并到上游，因为有一个breaking change。我打算后面把它改成在服务器上获取，这样动态插入一大段文字的体验挺糟糕，而且每一个访客都要获取一次有点滥用资源的意思。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://rubicon.lightstands.xyz/2021/07/10/set-up-sudo-with-howdy-on-fedora-34-for-faical-authenticating/</guid>
            <title>在Fedora 34上通过Howdy为sudo增加人脸识别认证</title>
            <link>https://rubicon.lightstands.xyz/2021/07/10/set-up-sudo-with-howdy-on-fedora-34-for-faical-authenticating/</link>
            <category>logbook</category>
            <category>Linux记</category>
            <category>生命很短</category>
            <pubDate>Sat, 10 Jul 2021 14:34:29 +0000</pubDate>
            <description><![CDATA[ &lt;p&gt;今天晚上折腾了一个小时，终于把 Howdy 折腾出来了，写篇博文作笔记以备查。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/boltgolt/howdy&#34;&gt;Howdy&lt;/a&gt; 是一个为 Linux 提供 Windows Hello 风格验证的软件，它作为一个 PAM 模块为其它软件提供人脸验证服务。不像 Windows Hello 需要认证过的IR摄像头， Howdy 基本上只要是个摄像头都可以使用。当然，如果没有 IR ，低光环境下的识别率就很拼摄像头的素质了。&lt;/p&gt;
&lt;p&gt;这篇博文主要内容是给 sudo 弄 Howdy：sudo 老是让人输密码着实令人烦躁，但是我又不想取消所有认证，正好 Howdy 的需求很低（只需要一个摄像头）。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;我机器上使用的发行版是 Fedora 34，64 位。&lt;/p&gt;
&lt;h2 id=&#34;安装Howdy&#34;&gt;&lt;a href=&#34;#安装Howdy&#34; class=&#34;headerlink&#34; title=&#34;安装Howdy&#34;&gt;&lt;/a&gt;安装Howdy&lt;/h2&gt;&lt;p&gt;只需要跟随 Howdy 项目的 README 里的步骤就可以安装 Howdy 了：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo dnf copr enable luya/howdy&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sudo dnf install howdy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;然后就按照 README 上面的说法执行 &lt;code&gt;sudo howdy add&lt;/code&gt; 添加面孔，然后就看见显示 &lt;code&gt;pip3 show dlib&lt;/code&gt; 之类的错误信息，意思是找不到 dlib 。这个 copr 仓库里的包没有把 dlib 作为依赖，得自己安装。&lt;/p&gt;
&lt;p&gt;可以用 &lt;code&gt;sudo dnf install python-dlib&lt;/code&gt; 安装dlib。也可以用pip安装： &lt;code&gt;sudo pip install dlib&lt;/code&gt; ，但是编译的时候肯定会卡几分钟，并且大概会占用 2-3GB 左右的内存。&lt;/p&gt;
&lt;p&gt;接下来再次运行 &lt;code&gt;sudo howdy add&lt;/code&gt; ，它会抱怨摄像头路径还没配置好：&lt;/p&gt;
&lt;figure class=&#34;highlight pgsql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;[sudo] &lt;span class=&#34;keyword&#34;&gt;password&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; ***: &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Adding face model &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; the &lt;span class=&#34;keyword&#34;&gt;user&lt;/span&gt; ***&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Enter a label &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; this &lt;span class=&#34;built_in&#34;&gt;new&lt;/span&gt; model [Initial model] (max &lt;span class=&#34;number&#34;&gt;24&lt;/span&gt; characters): &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Camera &lt;span class=&#34;type&#34;&gt;path&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;not&lt;/span&gt; configured correctly, please edit the &lt;span class=&#34;string&#34;&gt;&amp;#x27;device_path&amp;#x27;&lt;/span&gt; config &lt;span class=&#34;keyword&#34;&gt;value&lt;/span&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;Exception&lt;/span&gt; ignored &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt;: &amp;lt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; VideoCapture.__del__ at &lt;span class=&#34;number&#34;&gt;0x7f855eeb1b80&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Traceback (most recent &lt;span class=&#34;keyword&#34;&gt;call&lt;/span&gt; last):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  File &amp;quot;/usr/lib64/security/howdy/recorders/video_capture.py&amp;quot;, &lt;span class=&#34;type&#34;&gt;line&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;55&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; __del__&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    self.internal.&lt;span class=&#34;keyword&#34;&gt;release&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;AttributeError: &lt;span class=&#34;string&#34;&gt;&amp;#x27;VideoCapture&amp;#x27;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;object&lt;/span&gt; has &lt;span class=&#34;keyword&#34;&gt;no&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;attribute&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;internal&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;运行 &lt;code&gt;sudo howdy config&lt;/code&gt; 来打开配置，默认情况下会使用 GNU nano 作为编辑器。找到 &lt;code&gt;device_path = &lt;/code&gt; 这一行，我们要设置的就是这个值。但是怎么知道是哪个路径呢？我用的是VLC里面的”Open Capture Device…”：将”Capture mode”设为”Video camera”，在”Video device name”的下拉菜单里面的选项选择一个，点”Play”。一个一个地尝试不同的选项，哪个有画面就是哪个路径。在我的机器上，这个路径是 &lt;code&gt;/dev/video0&lt;/code&gt; ，最后就是 &lt;code&gt;device_path = /dev/video0&lt;/code&gt; 。&lt;/p&gt;
&lt;img src=&#34;/img/set-up-sudo-with-howdy-on-fedora-34-for-faical-authenticating/vlc-open-capture-device.png&#34; class=&#34;&#34; title=&#34;图片里的最后一个选项：Open Capture Device...，点击之后会打开一个窗口&#34;&gt;

&lt;p&gt;配置好之后运行 &lt;code&gt;sudo howdy add&lt;/code&gt;增 加面孔，这下能够顺利增加了！增加完面孔可以用 &lt;code&gt;sudo howdy test&lt;/code&gt; 打开测试窗口进行测试。&lt;/p&gt;
&lt;h2 id=&#34;配置PAM&#34;&gt;&lt;a href=&#34;#配置PAM&#34; class=&#34;headerlink&#34; title=&#34;配置PAM&#34;&gt;&lt;/a&gt;配置PAM&lt;/h2&gt;&lt;p&gt;PAM ，或者叫 Pluggable Authentication Module ，是一个中心化的身份验证服务。&lt;a href=&#34;https://www.redhat.com/sysadmin/pluggable-authentication-modules-pam&#34;&gt;这里有一篇对PAM的介绍&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;参考 &lt;a href=&#34;https://wiki.archlinux.org/title/Howdy&#34;&gt;Arch Wiki上的Howdy词条&lt;/a&gt;，要配置 sudo 的验证时行为，只需要修改 &lt;code&gt;/etc/pam.d/sudo&lt;/code&gt; ，在原先的第二行前面再加一行：&lt;/p&gt;
&lt;figure class=&#34;highlight awk&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;auth sufficient pam_python.so &lt;span class=&#34;regexp&#34;&gt;/lib64/&lt;/span&gt;security&lt;span class=&#34;regexp&#34;&gt;/howdy/&lt;/span&gt;pam.py&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里用&lt;code&gt;/lib64&lt;/code&gt;替换了 Arch Wiki 词条上的&lt;code&gt;/lib&lt;/code&gt;，是因为提供给 Fedora 的这个包把这些文件安装到&lt;code&gt;/lib64&lt;/code&gt;而不是&lt;code&gt;/lib&lt;/code&gt;，这个地方各个发行版可能都有不同的规则。&lt;/p&gt;
&lt;p&gt;PAM 的配置在修改后会自动应用。现在我们可以试试使用&lt;code&gt;sudo -i&lt;/code&gt;看看有没有调用人脸识别：&lt;/p&gt;
&lt;figure class=&#34;highlight angelscript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;[sudo]&lt;/span&gt; password &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; ***:&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;事情变得奇妙了起来……Howdy 并没有被调用。这说明 PAM 配置哪里出了问题，读一读跟 PAM 有关的日志：&lt;/p&gt;
&lt;figure class=&#34;highlight ebnf&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attribute&#34;&gt;sudo journalctl -g pam -r&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;然后发现了奇妙的错误：&lt;/p&gt;
&lt;figure class=&#34;highlight gradle&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;PAM adding faulty module: &lt;span class=&#34;regexp&#34;&gt;/lib/&lt;/span&gt;security/pam_python.so&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;PAM unable to dlopen(&lt;span class=&#34;regexp&#34;&gt;/lib/&lt;/span&gt;security&lt;span class=&#34;regexp&#34;&gt;/pam_python.so): /&lt;/span&gt;lib&lt;span class=&#34;regexp&#34;&gt;/security/&lt;/span&gt;pam_python.so: cannot open shared object &lt;span class=&#34;keyword&#34;&gt;file&lt;/span&gt;: No such &lt;span class=&#34;keyword&#34;&gt;file&lt;/span&gt; or directory&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;原来是找不到指定的 pam_python.so 这个 PAM 模块（用来调用 Howdy 的 pam.py ，Howdy 提供的 pam.py 是一个 Python 文件）。&lt;/p&gt;
&lt;p&gt;还好 &lt;a href=&#34;https://copr.fedorainfracloud.org/coprs/luya/howdy/&#34;&gt;luya/howdy Copr仓库&lt;/a&gt; 下的评论给我找到了一个简单的出路：根据 [RPM Sphere网站] 上的流程安装了 RPM Fusion 和 RPM Sphere 这两个第三方软件源之后，可以在 RPM Sphere 这个软件源上找到&lt;code&gt;pam_python&lt;/code&gt;这个包：&lt;/p&gt;
&lt;figure class=&#34;highlight cmake&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo dnf &lt;span class=&#34;keyword&#34;&gt;install&lt;/span&gt; pam_python&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;然后就可以愉悦地使用了！&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo -&lt;span class=&#34;selector-tag&#34;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;使用pamtester测试&#34;&gt;&lt;a href=&#34;#使用pamtester测试&#34; class=&#34;headerlink&#34; title=&#34;使用pamtester测试&#34;&gt;&lt;/a&gt;使用pamtester测试&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;http://pamtester.sourceforge.net/&#34;&gt;Pamtester&lt;/a&gt; 可以测试 PAM 的指定验证服务，这样要检查 Howdy 是否生效或者单纯享受人脸识别（大雾）就很简单啦。&lt;/p&gt;
&lt;figure class=&#34;highlight cmake&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo dnf &lt;span class=&#34;keyword&#34;&gt;install&lt;/span&gt; pamtester&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在这篇文章的例子里只需要（用要验证的用户的用户名代替&lt;code&gt;&amp;lt;用户名&amp;gt;&lt;/code&gt;）&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;pamtester sudo &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;用户名&lt;/span&gt;&amp;gt;&lt;/span&gt; authenticate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;就可以触发 PAM 的验证了。&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
