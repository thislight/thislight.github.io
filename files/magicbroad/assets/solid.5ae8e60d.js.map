{"version":3,"file":"solid.5ae8e60d.js","sources":["../../src/helpers/BroadClient/index.ts","../../src/helpers/BroadClient/solid.ts"],"sourcesContent":["import { RealtimeChannel, SupabaseClient, User } from \"@supabase/supabase-js\";\nimport { getUserDeviceId } from \"../getDeviceId\";\n\nexport interface Room {\n    id: string,\n    owner: string,\n    name: string,\n    created_at: string,\n}\n\nexport interface Participant {\n    user_id: string,\n}\n\nexport interface RoomOpts {\n    size_x?: number,\n    size_y?: number,\n}\n\nclass BroadClient {\n    supabase: SupabaseClient;\n\n    constructor(supabase: SupabaseClient) {\n        this.supabase = supabase;\n    }\n\n    async getAllRooms(): Promise<Room[]> {\n        const user = this.userOrError();\n        const response = await this.supabase.from(\"rooms\").select(\"id, owner, name, created_at\").eq(\"owner\", user.id);\n        if (response.error) {\n            throw response.error;\n        }\n        return response.data;\n    }\n\n    /// Find the room and return the room infomation.\n    async findRoomById(id: string): Promise<Room | null> {\n        const rooms = await this.supabase.rpc(\"find_room_by_id\", {target_id: id});\n        if (rooms.error) {\n            throw rooms.error;\n        } else {\n            if (rooms.data) {\n                if ((rooms.data as unknown as Record<string, unknown>)[\"id\"]) {\n                    return rooms.data as unknown as Room;\n                } else {\n                    return null;\n                }\n            } else {\n                return null;\n            }\n        }\n    }\n\n    /// Return user or throw an error.\n    userOrError(): User {\n        const user = this.supabase.auth.user();\n        if (user) {\n            return user;\n        } else {\n            throw new Error(\"login required\");\n        }\n    }\n\n    /// Join the room as current user.\n    async joinRoomById(id: string): Promise<Room | null> {\n        const room = await this.findRoomById(id);\n        if (room) {\n            const user = this.userOrError();\n            const q = await this.supabase.from(\"room_joint\").insert({\n                room_id: room.id,\n                user_id: user.id,\n            });\n            if (q.error) {\n                if (q.error.code === \"23505\") {\n                    return room; // Duplicated primary key\n                } else {\n                    throw q.error;\n                }\n            }\n            return null;\n        } else {\n            return null;\n        }\n    }\n\n    /// Check if current user joint to the room.\n    /// Return false if the user joint the room or the room not exists.\n    async isJoinedRoomById(id: string): Promise<boolean> {\n        const user = this.userOrError();\n        const q = await this.supabase.from(\"room_joint\").select(\"created_at\").eq(\"room_id\", id).eq(\"user_id\", user.id);\n        if (q.error) {\n            throw q.error;\n        } else {\n            return q.data.length > 0;\n        }\n    }\n\n    /// Send a message to room message queue with open a channel.\n    /// It is recommended to use the channel to push message (see `openRoomMessageQueueChannel`).\n    async sendMessageTo(room_id: string, message: object): Promise<void> {\n        const q = await this.supabase.from(\"room_message_queue\").insert({\n            room: room_id,\n            message: message,\n        });\n        if (q.error) {\n            throw q.error;\n        }\n    }\n\n    /// Open a room message queue channel using supabse realtime.\n    /// Your server must correctly configured: https://github.com/supabase/realtime#server .\n    /// And you must use `setAuth` to set token on the realtime client manually\n    /// to ensure you have permission to the rows: https://github.com/supabase/realtime#realtime-rls .\n    async openRoomMessageQueueChannel(room_id: string): Promise<RealtimeChannel> {\n        const room = await this.findRoomById(room_id);\n        if (!room) {\n            throw Error(\"Room not found\");\n        }\n        return this.supabase.channel(`realtime:public:room_message_queue:room=eq.${room.id}`, {\n            selfBroadcast: false,\n        });\n    }\n\n    async createRoom(name: string): Promise<Room> {\n        const user = this.userOrError();\n        const {data, error} = await this.supabase.from(\"rooms\").insert({\n            name: name,\n            owner: user.id,\n        });\n        if (error){\n            throw error;\n        }\n        return (data as Room[])[0];\n    }\n\n    getUserDeviceId(): string {\n        return getUserDeviceId(this.userOrError().id);\n    }\n\n    async getParticipants(roomId: string): Promise<Participant[]> {\n        const {data, error} = await this.supabase.from(\"room_joint\").select(\"user_id\").eq(\"room_id\", roomId);\n        if (error) {\n            throw error;\n        }\n        return (data as Participant[]); // WARNING: this casting is based on the table structure.\n    }\n\n    async getRoomOpts(roomId: string): Promise<RoomOpts> {\n        const {data, error} = await this.supabase.from(\"room_opts\").select(\"size_x, size_y\").eq(\"room_id\", roomId).limit(1);\n        if (error) {\n            throw error;\n        }\n        if (typeof data[0] === \"object\") {\n            return data[0] as RoomOpts;\n        } else {\n            return {};\n        }\n    }\n\n    async setRoomOpts(roomId: string, opts: Partial<RoomOpts>) {\n        const {error} = await this.supabase.from(\"room_opts\").upsert(\n            {...opts, room_id: roomId},\n        ).eq(\"room_id\", roomId);\n        if (error) {\n            throw error;\n        }\n    }\n}\n\nexport default BroadClient;\n","import BroadClient from \"./index\";\nimport { createSupabase } from \"solid-supabase\";\n\nexport const useBroadClient = () => {\n    const supabase = createSupabase();\n\n    return new BroadClient(supabase);\n};\n"],"names":["BroadClient","constructor","supabase","getAllRooms","user","userOrError","response","from","select","eq","id","error","data","findRoomById","rooms","rpc","target_id","auth","Error","joinRoomById","room","q","insert","room_id","user_id","code","isJoinedRoomById","length","sendMessageTo","message","openRoomMessageQueueChannel","channel","selfBroadcast","createRoom","name","owner","getUserDeviceId","getParticipants","roomId","getRoomOpts","limit","setRoomOpts","opts","upsert","useBroadClient","createSupabase"],"mappings":"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"}