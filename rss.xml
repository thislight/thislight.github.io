<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Rubicon&#39;s Rubicon</title>
        <link>https://rubicon.lightstands.xyz</link>
        <description></description>
        <language>zh-cn,en,default</language>
        <pubDate>Thu, 30 Dec 2021 21:26:06 +0000</pubDate>
        <lastBuildDate>Thu, 30 Dec 2021 21:26:06 +0000</lastBuildDate>
        <category>Hexo</category>
        <category>logbook</category>
        <category>博客功能更新</category>
        <category>RSS</category>
        <category>Makru</category>
        <category>C</category>
        <category>系列文章</category>
        <category>Kache Development</category>
        <category>Kache</category>
        <category>网络</category>
        <category>诗集</category>
        <category>Linux记</category>
        <category>生命很短</category>
        <item>
            <guid isPermalink="true">https://rubicon.lightstands.xyz/2021/12/30/Blog-2021-Final-Update/</guid>
            <title>博客2021年最终功能更新</title>
            <link>https://rubicon.lightstands.xyz/2021/12/30/Blog-2021-Final-Update/</link>
            <category>Hexo</category>
            <category>logbook</category>
            <category>博客功能更新</category>
            <pubDate>Thu, 30 Dec 2021 21:26:06 +0000</pubDate>
            <description><![CDATA[ &lt;p&gt;我对博客功能的要求是拒绝花里胡哨，一切为阅读服务。现在是2021年年底，正好我要为我对年终总结的一些设想给博客更新一些功能：快速引用素材、Steam游戏卡片、引用Wikipedia条目。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;快速引用素材&#34;&gt;&lt;a href=&#34;#快速引用素材&#34; class=&#34;headerlink&#34; title=&#34;快速引用素材&#34;&gt;&lt;/a&gt;快速引用素材&lt;/h2&gt;&lt;p&gt;之前我引用图片一直都是用图片的完整路径，实在是非常麻烦，所以我一直期待能找到一个简单的方法引用素材。原先的考虑是用&lt;a href=&#34;https://github.com/cnzsb/hexo-asset&#34;&gt;hexo-asset&lt;/a&gt;，但是在一番简单搜索后发现hexo-render-marked在3.1.0+已经携带了类似功能了：&lt;a href=&#34;https://hexo.io/docs/asset-folders.html#Embedding-an-image-using-markdown&#34;&gt;https://hexo.io/docs/asset-folders.html#Embedding-an-image-using-markdown&lt;/a&gt; 。直接在_config.yml里打开就行。&lt;/p&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;post_asset_folder:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;marked:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;prependRoot:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;postAsset:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/2021/12/30/Blog-2021-Final-Update/mastodon_Elephant_Friend_Curious.png&#34; alt=&#34;测试用的可爱Mastodon&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Steam游戏卡片&#34;&gt;&lt;a href=&#34;#Steam游戏卡片&#34; class=&#34;headerlink&#34; title=&#34;Steam游戏卡片&#34;&gt;&lt;/a&gt;Steam游戏卡片&lt;/h2&gt;&lt;iframe src=&#34;https://store.steampowered.com/widget/22380/&#34; frameborder=&#34;0&#34; width=&#34;100%&#34; height=&#34;190&#34;&gt;&lt;/iframe&gt;

&lt;iframe src=&#34;https://store.steampowered.com/widget/412020/?t=《地铁：离乡》确实是非常不错的半开放世界线性流程FPS。&#34; frameborder=&#34;0&#34; width=&#34;100%&#34; height=&#34;190&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;搜刮到&lt;a href=&#34;https://github.com/HCLonely/hexo-tag-steamgame&#34;&gt;hexo-tag-steamgames&lt;/a&gt;可以实现这个。&lt;/p&gt;
&lt;h2 id=&#34;引用Wikipedia条目&#34;&gt;&lt;a href=&#34;#引用Wikipedia条目&#34; class=&#34;headerlink&#34; title=&#34;引用Wikipedia条目&#34;&gt;&lt;/a&gt;引用Wikipedia条目&lt;/h2&gt;&lt;blockquote id=&#39;wikipedia-70787&#39;&gt;&lt;script&gt;
      window.addEventListener(&#39;load&#39;, function() {
        var element = document.getElementById(&#39;wikipedia-70787&#39;);
        var req = new XMLHttpRequest();
        req.addEventListener(&#34;load&#34;, function() {
          var result = this.response;
          const extract = result.extract;
          element.prepend(extract);
        });
        req.addEventListener(&#34;error&#34;, function() {
          element.prepend(&#39;Failed to fetch wikipedia data for &#34;Wikipedia&#34;.&#39;);
        });
        req.open(&#39;GET&#39;, &#39;https://zh.wikipedia.org/api/rest_v1/page/summary/Wikipedia?redirect=false&#39;);
        req.responseType = &#39;json&#39;;
        req.setRequestHeader(&#39;accept&#39;, &#39;application/json; charset=utf-8; profile=&#34;https://www.mediawiki.org/wiki/Specs/Summary/1.4.2&#34;&#39;);
        req.setRequestHeader(&#39;api-user-agent&#39;, &#39;Hexo Wikipedia Tag (from https://rubicon.lightstands.xyz)&#39;);
        req.send();
      });
    &lt;/script&gt;&lt;p&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/Wikipedia&#34;&gt;Wikipedia:Wikipedia&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;原来我是想用&lt;a href=&#34;https://github.com/tuanna-hsp/hexo-tag-wikipedia&#34;&gt;hexo-tag-wikipedia&lt;/a&gt;。但是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;这个插件用的不是新的Restful API，实际获取到的字符串千奇百怪。&lt;/li&gt;
&lt;li&gt;这东西一开始用不了，我一看控制台发现一串&lt;code&gt;$.getJSON&lt;/code&gt;：它插入的脚本用的JQuery的API。然而我的网页上并没有JQuery。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最后我改了一下把它改成用XMLHTTPRequest从&lt;a href=&#34;https://en.wikipedia.org/api/rest_v1/#/&#34;&gt;Wikipedia的Restful API&lt;/a&gt;拉取数据。脚本很简单：&lt;/p&gt;
&lt;figure class=&#34;highlight zephir&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;buildArgsHash&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; argsHash = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    args.forEach(arg =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; params = arg.split(&lt;span class=&#34;string&#34;&gt;&amp;#x27;:&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        argsHash[params[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]] = params[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; argsHash;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;generateWikipediaTagHtml&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(args, content)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; argsHash = buildArgsHash(args);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; title = argsHash[&lt;span class=&#34;string&#34;&gt;&amp;#x27;title&amp;#x27;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; lang = argsHash[&lt;span class=&#34;string&#34;&gt;&amp;#x27;lang&amp;#x27;&lt;/span&gt;] !== &lt;span class=&#34;keyword&#34;&gt;undefined&lt;/span&gt; ? argsHash[&lt;span class=&#34;string&#34;&gt;&amp;#x27;lang&amp;#x27;&lt;/span&gt;] : &lt;span class=&#34;string&#34;&gt;&amp;#x27;en&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; baseUrl = `https:&lt;span class=&#34;comment&#34;&gt;//$&amp;#123;lang&amp;#125;.wikipedia.org`;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; url = `$&amp;#123;baseUrl&amp;#125;/api/rest_v1/page/summary/$&amp;#123;title&amp;#125;?redirect=&lt;span class=&#34;keyword&#34;&gt;false&lt;/span&gt;`;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; tagId = Math.round(Math.random() * &lt;span class=&#34;number&#34;&gt;100000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; embeddedScript = `&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      window.addEventListener(&lt;span class=&#34;string&#34;&gt;&amp;#x27;load&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; element = document.getElementById(&lt;span class=&#34;string&#34;&gt;&amp;#x27;$&amp;#123;tagId&amp;#125;&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; req = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; XMLHttpRequest();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        req.addEventListener(&lt;span class=&#34;string&#34;&gt;&amp;quot;load&amp;quot;&lt;/span&gt;, &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; result = this.response;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; extract = result.extract;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          element.prepend(extract);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        req.addEventListener(&lt;span class=&#34;string&#34;&gt;&amp;quot;error&amp;quot;&lt;/span&gt;, &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          element.prepend(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Failed to fetch wikipedia data for &amp;quot;$&amp;#123;title&amp;#125;&amp;quot;.&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        req.open(&lt;span class=&#34;string&#34;&gt;&amp;#x27;GET&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;$&amp;#123;url&amp;#125;&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        req.responseType = &lt;span class=&#34;string&#34;&gt;&amp;#x27;json&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        req.setRequestHeader(&lt;span class=&#34;string&#34;&gt;&amp;#x27;accept&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;application/json; charset=utf-8; profile=&amp;quot;https://www.mediawiki.org/wiki/Specs/Summary/1.4.2&amp;quot;&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        req.send();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    `;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; contentText = `&amp;lt;script&amp;gt;$&amp;#123;embeddedScript&amp;#125;&amp;lt;/script&amp;gt;`;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (argsHash[&lt;span class=&#34;string&#34;&gt;&amp;#x27;wikiButton&amp;#x27;&lt;/span&gt;] === &lt;span class=&#34;string&#34;&gt;&amp;#x27;true&amp;#x27;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        contentText += `&amp;lt;p&amp;gt;&amp;lt;a href=&lt;span class=&#34;string&#34;&gt;&amp;quot;$&amp;#123;baseUrl&amp;#125;/wiki/$&amp;#123;title&amp;#125;&amp;quot;&lt;/span&gt;&amp;gt;Wikipedia:$&amp;#123;title&amp;#125;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;`;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; `&amp;lt;blockquote id=&lt;span class=&#34;string&#34;&gt;&amp;#x27;$&amp;#123;tagId&amp;#125;&amp;#x27;&lt;/span&gt;&amp;gt;$&amp;#123;contentText&amp;#125;&amp;lt;/blockquote&amp;gt;`;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;hexo.extend.tag.register(&lt;span class=&#34;string&#34;&gt;&amp;#x27;wikipedia&amp;#x27;&lt;/span&gt;, generateWikipediaTagHtml);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;我把它塞到了我的fork里（ &lt;a href=&#34;https://github.com/thislight/hexo-tag-wikipedia&#34;&gt;https://github.com/thislight/hexo-tag-wikipedia&lt;/a&gt; ），找时间我可能问问作者再把它合并到上游，因为有一个breaking change。我打算后面把它改成在服务器上获取，这样动态插入一大段文字的体验挺糟糕，而且每一个访客都要获取一次有点滥用资源的意思。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://rubicon.lightstands.xyz/2021/11/02/measure-peer-reachability/</guid>
            <title>在Rope中测量&#34;可达&#34;</title>
            <link>https://rubicon.lightstands.xyz/2021/11/02/measure-peer-reachability/</link>
            <category>Kache Development</category>
            <category>Kache</category>
            <category>网络</category>
            <pubDate>Tue, 02 Nov 2021 16:00:00 +0000</pubDate>
            <description><![CDATA[ &lt;p&gt;观测你的猫的生死可不是件易事。&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;当太阳明晃晃地照在可爱的Mudy身上时，它身上蓬松的毛反射了光线。光线经过许多介质进入你的眼中。哪怕不研究我们的身体如何处理这些莫名奇妙的光线，光从皮毛到你眼前的过程也需要时间。只不过这个时间太短：当你（在真空中）距离Mudy 299792458米时，这个时间是1秒。换句话说，当你在南极时，你看到北极的Mudy至少是0.05秒前的Mudy；当你在中国时，你看到北美的Mudy至少是0.1秒前的Mudy。&lt;/p&gt;
&lt;img src=&#34;/img/measure-peer-reachability/you-mudy-sun.png&#34; class=&#34;&#34;&gt;

&lt;p&gt;Rope是为分布式应用框架Kache设计的抽象网络层。作为一个分布式应用框架，网络是最必要也是最麻烦的事情。在分布式网络里，知道一个Peer是否活着和能否连接上是重中之重。但是，在网络上观测一个Peer就如观测北极的Mudy或数千光年外的恒星一样麻烦。因为：1)你的朋友总是很麻烦，哪怕他们本意并不是想给你捣乱；2)你没办法不花时间就知道他们的情况，哪怕你和他们的延时只有1ms，你知道的也只是他们1ms前的情况，更别说我们不可能持续去监控他们的状况。&lt;/p&gt;
&lt;p&gt;在描述一个Peer是否“可达”时，我们会变得混乱：我们事实上有无限多种方法“达”一个Peer。就像我们可以不用“看”就可以“听”到Mudy还活着。&lt;/p&gt;
&lt;img src=&#34;/img/measure-peer-reachability/you-mudy-sound.png&#34; class=&#34;&#34;&gt;

&lt;p&gt;尽管我们有很多方法跟一个Peer交换信息，但却不是所有方法在所有时刻都有效。所以在描述一个Peer是否“可达”时，我们还需要描述其中一个方法是否“可达”目的地。&lt;/p&gt;
&lt;img src=&#34;/img/measure-peer-reachability/multiple-transports-to-peer.png&#34; class=&#34;&#34;&gt;

&lt;p&gt;Rope使用PhysicalAddress和Peer分别描述路径和Peer的“可达”性。对于Peer而言，我们只需要知道它是否“活着”，即我们能否在网络上找到它。但对于PhysicalAddress而言，除了我们能否找到它，我们还需要知道我们是否能通过这条路径连接到Peer。&lt;/p&gt;
&lt;h2 id=&#34;Peer&#34;&gt;&lt;a href=&#34;#Peer&#34; class=&#34;headerlink&#34; title=&#34;Peer&#34;&gt;&lt;/a&gt;Peer&lt;/h2&gt;&lt;p&gt;Peer，在中文中经常被翻译成“对等端”，我们对它的唯一要求就是活着。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;pub const Peer = struct &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    aliveUntil: u64 = 0,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    aliveOffest: u64 = 0,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这里我们采用了一种租期风格的方法来测量Peer是否活着：Peer会通过“租期”承诺自己在多少时间前会活着，Peer在租期过期前需要不停地续期，过期后我们就认为Peer已经死了。&lt;code&gt;aliveUntil&lt;/code&gt;是这个租期的最后期限，&lt;code&gt;aliveOffest&lt;/code&gt;则是Peer设置的租期时长。租期虽然被广泛使用（大部分的协议的心跳算法也使用租期），但它是一个很令人头疼的算法。&lt;/p&gt;
&lt;h3 id=&#34;租期不定&#34;&gt;&lt;a href=&#34;#租期不定&#34; class=&#34;headerlink&#34; title=&#34;租期不定&#34;&gt;&lt;/a&gt;租期不定&lt;/h3&gt;&lt;p&gt;租期的令人头疼之处在于：租期时长可以是一个随意的值，但算法的表现跟租期时长有关，我们需要根据情况确定租期的值。较长的租期会使得Peer被错认为能连接上的时间会更长，它使得我们要测量的可达性变为“可能可达性”；较短的租期促使Peer更经常地续期，降低容错能力并且使用更多网络流量。&lt;/p&gt;
&lt;p&gt;Google在它的Google Play Service中与服务器的心跳部分采取了自适应租期：随着连接上的时长增加，租期会逐渐变长。这种自适应租期的前提是，长期的“能连接上”可以预测接下来不太可能出现一段时间无法连接上的情况。自适应租期确实是个不错的方法，不过Rope中租期由Peer设置。Peer可以根据实际情况确定租期，目前这个数字还是固定值10秒。&lt;/p&gt;
&lt;h2 id=&#34;PhysicalAddress&#34;&gt;&lt;a href=&#34;#PhysicalAddress&#34; class=&#34;headerlink&#34; title=&#34;PhysicalAddress&#34;&gt;&lt;/a&gt;PhysicalAddress&lt;/h2&gt;&lt;p&gt;能被找到和能连接上是有区别的。当我们通过&lt;code&gt;bind(2)&lt;/code&gt;、&lt;code&gt;listen(2)&lt;/code&gt;和&lt;code&gt;accept(2)&lt;/code&gt;监听一个端口时，其他人哪怕有我们的地址和端口号也不一定能连上。我们经常需要一些特殊的技巧才能在现实中连接上其它人的机器。比如，如果我们和目标机器之间有NAT的话，我们必须要穿透NAT才能连上。尽管它确实存在，但是我们确实不一定能连接上。&lt;/p&gt;
&lt;p&gt;所以，Rope的PhysicalAddress里面的可达性被分成了两个维度：Existence和Reachability。Existence指的是这个PhysicalAddress是否存在，Reachability指示这个PhysicalAddress是否有可能连接上。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;const PhysicalAddress = struct &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    lastReachable: u64 = 0,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    lastFound: u64 = 0,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    lastDismiss: u64 = 0,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    promiseReachable: u64 = 0,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;上面lastFound和lastDismiss就是用来标识Existence维度的值，lastReachable和promiseReachable用来标识Reachability维度。它们都是Unix时间戳。&lt;/p&gt;
&lt;h3 id=&#34;Existence&#34;&gt;&lt;a href=&#34;#Existence&#34; class=&#34;headerlink&#34; title=&#34;Existence&#34;&gt;&lt;/a&gt;Existence&lt;/h3&gt;&lt;p&gt;&lt;code&gt;lastFound&lt;/code&gt;和&lt;code&gt;lastDismiss&lt;/code&gt;用于标识Existence维度，这两个值分别跟两个事件有关：&lt;code&gt;_wire.found&lt;/code&gt;和&lt;code&gt;_wire.down&lt;/code&gt;。前一个在发现新的PhysicalAddress后发送，后一个在发现PhysicalAddress所代表的路径断开之后发送。它们会通过EventPub发送到网络上的其它Peer。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;_wire.found&lt;/code&gt;事件会更新&lt;code&gt;lastFound&lt;/code&gt;到一个时间，&lt;code&gt;_wire.down&lt;/code&gt;事件会更新&lt;code&gt;lastDismiss&lt;/code&gt;。当&lt;code&gt;lastFound&lt;/code&gt;大于&lt;code&gt;lastDismiss&lt;/code&gt;时，我们认为这个PhysicalAddress还存在于网络上。&lt;/p&gt;
&lt;p&gt;我们是否可以用一个值标识这个维度，比如说单一个&lt;code&gt;lastFound&lt;/code&gt;？最开始我也是只设计了&lt;code&gt;lastFound&lt;/code&gt;。问题在于，如果我们这样做，这个Existence会变成一个租期风格的维度。但是这个事情明明我们已知，使用租期会出现“可能”。&lt;br&gt;或者我们可以使用一个布尔值来代替这两个值，但是这样时间信息就会丢失。丢失时间信息会让程序在这两个事件频繁发生时变得混乱，特别是当发送该事件到接受该事件存在时间差时（EventPub使用泛洪法广播消息，在我们测量可达性的这个位置不保证事件能按照全局发送顺序收到）。考虑这个例子：两个Peer分别发送某个PhysicalAddress的found和down事件，found先发送但是最后收到，down后发送但是先收到。如果不分别保存两个时间我们只能简单地覆盖之前的结果，这时候状态就会变得奇怪。&lt;/p&gt;
&lt;h3 id=&#34;Reachability&#34;&gt;&lt;a href=&#34;#Reachability&#34; class=&#34;headerlink&#34; title=&#34;Reachability&#34;&gt;&lt;/a&gt;Reachability&lt;/h3&gt;&lt;p&gt;Reachability是一个完全独立的维度，它与Existence无关，跟这个PhysicalAddress是否连接上或是否正在传输数据有关。这是一个租期风格的维度。&lt;/p&gt;
&lt;h3 id=&#34;理解”Reachable-but-not-exists”&#34;&gt;&lt;a href=&#34;#理解”Reachable-but-not-exists”&#34; class=&#34;headerlink&#34; title=&#34;理解”Reachable but not exists”&#34;&gt;&lt;/a&gt;理解”Reachable but not exists”&lt;/h3&gt;&lt;p&gt;在Reachability里我强调这两个维度是独立的。这样看起来会存在一种奇特的情况：Reachable but not exists（可达但不存在）。&lt;/p&gt;
&lt;p&gt;既然可达为何不存在呢？这里的不存在不是真的不存在，而是在网络上不存在。试试考虑下面的情景：目前网络上存在A和B，它们互相是认为对方Reachable and exists的。现在有一个新节点C要加入，他连接A并开始广播&lt;code&gt;_ticktock&lt;/code&gt;事件让大家知道它的存在。在这时候A和C互相之间可达，但在A的视角看这个PhysicalAddress的lastFound仍然是初始值0，即这个PhysicalAddress还不存在（not exists）。现在A因为发现了新的PhysicalAddress就会广播一条&lt;code&gt;_wire.found&lt;/code&gt;事件。然后B、C收到这个事件后就会更新它们的&lt;code&gt;lastFound&lt;/code&gt;，然后分别将该消息转发给A、C和A、B。这时A就会收到它自己发出的这条消息，虽然这条消息不会被转发给别的Peer或应用，但是A仍然会用这条消息更新&lt;code&gt;lastFound&lt;/code&gt;。这时在A处这个PhysicalAddress就会变成Reachable and exists（可达并存在）。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://rubicon.lightstands.xyz/2021/10/13/hexo-topic-feeds/</guid>
            <title>Rubicon&#39;s Rubicon的RSS订阅功能介绍和技术细节</title>
            <link>https://rubicon.lightstands.xyz/2021/10/13/hexo-topic-feeds/</link>
            <category>Hexo</category>
            <category>RSS</category>
            <pubDate>Wed, 13 Oct 2021 18:36:53 +0000</pubDate>
            <description><![CDATA[ &lt;blockquote&gt;
&lt;p&gt;RSS（英文全称：RDF Site Summary 或 Really Simple Syndication[2]），中文译作簡易資訊聚合[3]，也称聚合内容[4]，是一種消息來源格式規範，用以聚合多個網站更新的內容並自動通知網站訂閱者。使用 RSS 後，網站訂閱者便無需再手動查看網站是否有新的內容，同時 RSS 可將多個網站更新的內容進行整合，以摘要的形式呈現，有助於訂閱者快速獲取重要信息，並選擇性地點閱查看。 ———— &lt;a href=&#34;https://zh.wikipedia.org/wiki/RSS&#34;&gt;RSS - Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;之前花了两天时间完成了这个功能，后来心血来潮在网站上看看时发现有bug。修好bug之后我觉得还是水一篇文章吧，否则博客开了一年都没什么内容。这篇文章主要就是介绍RSS订阅功能以及实现时的一些技术细节，如果想要扒我（包含这个功能）的主题或者借以参考的话，我过一段时间会把这个主题整理开源出来。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;Rubicon’s Rubicon同时支持全站订阅和按标签或目录订阅。全站订阅就在每个页面最下方的“Links”里面。&lt;/p&gt;
&lt;img src=&#34;/img/hexo-topic-feeds/site-feeds.png&#34; class=&#34;&#34; title=&#34;Feed (Atom) 和 Feed (RSS)&#34;&gt;

&lt;p&gt;目前为止，对于Rubicon’s Rubicon来说RSS和Atom订阅没有差别。&lt;/p&gt;
&lt;h2 id=&#34;按标签或目录订阅&#34;&gt;&lt;a href=&#34;#按标签或目录订阅&#34; class=&#34;headerlink&#34; title=&#34;按标签或目录订阅&#34;&gt;&lt;/a&gt;按标签或目录订阅&lt;/h2&gt;&lt;p&gt;通过菜单栏里的”Archives”或右边的”Tags”进入任意标签或目录的页面，在标题下面就有“FEED (Atom)”和“FEED (RSS)”。&lt;/p&gt;
&lt;img src=&#34;/img/hexo-topic-feeds/topic-feeds.png&#34; class=&#34;&#34; title=&#34;标题“诗集”下面有“FEED (Atom)”和“FEED (RSS)”&#34;&gt;

&lt;h2 id=&#34;技术细节&#34;&gt;&lt;a href=&#34;#技术细节&#34; class=&#34;headerlink&#34; title=&#34;技术细节&#34;&gt;&lt;/a&gt;技术细节&lt;/h2&gt;&lt;p&gt;Rubicon’s Rubicon基于静态博客生成器&lt;a href=&#34;https://hexo.io/&#34;&gt;Hexo&lt;/a&gt;构建，所以当然没法根据参数动态生成订阅文件。不过&lt;a href=&#34;https://github.com/sergeyzwezdin/hexo-feed&#34;&gt;hexo-feed&lt;/a&gt;这个插件支持按照标签或者目录生成订阅。我做了一些配置，然后在相应的页面引用（拼链接）就可以使用了。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://rubicon.lightstands.xyz/2021/10/13/poem-2020-2021/</guid>
            <title>随想集（2020 &amp; 2021）</title>
            <link>https://rubicon.lightstands.xyz/2021/10/13/poem-2020-2021/</link>
            <category>诗集</category>
            <pubDate>Wed, 13 Oct 2021 15:18:33 +0000</pubDate>
            <description><![CDATA[ &lt;blockquote&gt;
&lt;p&gt;谨以此集纪念我自己的“20年代初”。拙作几篇，仅作备查。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;浪（2020年5月）&#34;&gt;&lt;a href=&#34;#浪（2020年5月）&#34; class=&#34;headerlink&#34; title=&#34;浪（2020年5月）&#34;&gt;&lt;/a&gt;浪（2020年5月）&lt;/h2&gt;&lt;p&gt;桃花树站在海岸上&lt;br&gt;前浪刚刚拍碎&lt;br&gt;后浪还在路上&lt;br&gt;桃花树上有着人影&lt;br&gt;并着电喇叭&lt;/p&gt;
&lt;h2 id=&#34;末代帝国（2020年5月）&#34;&gt;&lt;a href=&#34;#末代帝国（2020年5月）&#34; class=&#34;headerlink&#34; title=&#34;末代帝国（2020年5月）&#34;&gt;&lt;/a&gt;末代帝国（2020年5月）&lt;/h2&gt;&lt;p&gt;万岁一声酒，朽木何时朽？屋漏偏灭花烛，灯下无影踪。黄琉红璃映斜阳，山川早覆众生口。还剩鸦叫几声，花落人瘦，不敢问西东。&lt;/p&gt;
&lt;h2 id=&#34;山川（2020年9月）&#34;&gt;&lt;a href=&#34;#山川（2020年9月）&#34; class=&#34;headerlink&#34; title=&#34;山川（2020年9月）&#34;&gt;&lt;/a&gt;山川（2020年9月）&lt;/h2&gt;&lt;p&gt;山川&lt;br&gt;静悄悄地绿&lt;br&gt;沉没在不语的早餐旁边&lt;br&gt;&lt;br /&gt;&lt;br&gt;旅人的手指&lt;br&gt;唱赞歌&lt;br&gt;伴随着星星似的闪光&lt;br&gt;活泼地跳舞&lt;br&gt;&lt;br /&gt;&lt;br&gt;千年以后&lt;br&gt;一样地燃烧过&lt;br&gt;一样地曾在空气中飞舞&lt;/p&gt;
&lt;h2 id=&#34;无题（2020年11月）&#34;&gt;&lt;a href=&#34;#无题（2020年11月）&#34; class=&#34;headerlink&#34; title=&#34;无题（2020年11月）&#34;&gt;&lt;/a&gt;无题（2020年11月）&lt;/h2&gt;&lt;p&gt;风推浮萍随身灭，冰冻三尺一日寒。&lt;br&gt;铁马残破二十年，孤烟垂尽寻常家。&lt;/p&gt;
&lt;h2 id=&#34;自题（2020年）&#34;&gt;&lt;a href=&#34;#自题（2020年）&#34; class=&#34;headerlink&#34; title=&#34;自题（2020年）&#34;&gt;&lt;/a&gt;自题（2020年）&lt;/h2&gt;&lt;p&gt;浮萍逐波十八年，竹节伶仃醉道虚。&lt;br&gt;莫教长歌独对月，孤灯下磨影敲门。&lt;/p&gt;
&lt;h2 id=&#34;中国（2020年）&#34;&gt;&lt;a href=&#34;#中国（2020年）&#34; class=&#34;headerlink&#34; title=&#34;中国（2020年）&#34;&gt;&lt;/a&gt;中国（2020年）&lt;/h2&gt;&lt;p&gt;还剩多少山川在唱自由的歌&lt;br&gt;红色愤怒地指责黑色&lt;br&gt;透明的字词传出江南&lt;br&gt;水箱在笑&lt;/p&gt;
&lt;h2 id=&#34;除夕（2021年2月）&#34;&gt;&lt;a href=&#34;#除夕（2021年2月）&#34; class=&#34;headerlink&#34; title=&#34;除夕（2021年2月）&#34;&gt;&lt;/a&gt;除夕（2021年2月）&lt;/h2&gt;&lt;p&gt;爆竹声声慢，灯火璀璨，星空从地面升到天上&lt;br&gt;飞机正常的争吵，不同的眼睛不会说话&lt;br&gt;也像沉积在水底的夜晚&lt;br&gt;画着不同人的漫画&lt;/p&gt;
&lt;h2 id=&#34;断代（2021年6月）&#34;&gt;&lt;a href=&#34;#断代（2021年6月）&#34; class=&#34;headerlink&#34; title=&#34;断代（2021年6月）&#34;&gt;&lt;/a&gt;断代（2021年6月）&lt;/h2&gt;&lt;p&gt;一朵樱花&lt;br&gt;流进干涸的河道&lt;br&gt;发出铁锈的声音&lt;br&gt;和泠冽的味道&lt;br&gt;&lt;br /&gt;&lt;br&gt;我是否需要呼吸&lt;br&gt;在极蓝的火焰里&lt;br&gt;烧个彻底&lt;br&gt;露出棕色的核心&lt;br&gt;也不知道远方的幻影&lt;br&gt;踏碎我的妄想&lt;br&gt;剩下什么可描述之物&lt;br&gt;&lt;br /&gt;&lt;br&gt;没有这样一种魔法&lt;br&gt;把水面停下&lt;br&gt;浮萍不再追逐波浪&lt;br&gt;&lt;br /&gt;&lt;br&gt;有没有许多种可能&lt;br&gt;自由呼吸&lt;br&gt;毋需等上许多光阴&lt;/p&gt;
&lt;h2 id=&#34;国（2021年9月）&#34;&gt;&lt;a href=&#34;#国（2021年9月）&#34; class=&#34;headerlink&#34; title=&#34;国（2021年9月）&#34;&gt;&lt;/a&gt;国（2021年9月）&lt;/h2&gt;&lt;p&gt;苍生难万载，灯火千年梦。曾有士人念天下，如今字里还。清风不识字？何故乱翻书。斜阳下，屋檐乱。热血终有恨，鬼怪在人间。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://rubicon.lightstands.xyz/2021/10/13/poem-2019/</guid>
            <title>无言集（2019）</title>
            <link>https://rubicon.lightstands.xyz/2021/10/13/poem-2019/</link>
            <category>诗集</category>
            <pubDate>Wed, 13 Oct 2021 11:22:59 +0000</pubDate>
            <description><![CDATA[ &lt;blockquote&gt;
&lt;p&gt;几篇拙作，仅以备用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;无题-（2019年2月）&#34;&gt;&lt;a href=&#34;#无题-（2019年2月）&#34; class=&#34;headerlink&#34; title=&#34;无题 （2019年2月）&#34;&gt;&lt;/a&gt;无题 （2019年2月）&lt;/h2&gt;&lt;p&gt;华日丽压金黄沙，绿意已深枯枝头。&lt;br&gt;花开艳谢惊尘起，星河大江远流归。&lt;/p&gt;
&lt;h2 id=&#34;路远遇宾客（2019年2月）&#34;&gt;&lt;a href=&#34;#路远遇宾客（2019年2月）&#34; class=&#34;headerlink&#34; title=&#34;路远遇宾客（2019年2月）&#34;&gt;&lt;/a&gt;路远遇宾客（2019年2月）&lt;/h2&gt;&lt;p&gt;芳草无处寻，流水觅不回。&lt;br&gt;庭深埋灰土，云远藏明星。&lt;br&gt;稀罕有知春，旧鸟报新语。&lt;br&gt;路远途难行，时日不可归。&lt;/p&gt;
&lt;h2 id=&#34;赠高考学子（2019年2月）&#34;&gt;&lt;a href=&#34;#赠高考学子（2019年2月）&#34; class=&#34;headerlink&#34; title=&#34;赠高考学子（2019年2月）&#34;&gt;&lt;/a&gt;赠高考学子（2019年2月）&lt;/h2&gt;&lt;p&gt;誓师未行人先行，百日将近学不尽。&lt;br&gt;千秋挑灯战明月，万载硕果挂枝头。&lt;br&gt;凤凰马蹄声未响，龙咆战鼓已齐鸣。&lt;br&gt;多年热血终无恨，桃花仍恋故园间。&lt;/p&gt;
&lt;h2 id=&#34;赠高考学子（其二）-（2019年）&#34;&gt;&lt;a href=&#34;#赠高考学子（其二）-（2019年）&#34; class=&#34;headerlink&#34; title=&#34;赠高考学子（其二） （2019年）&#34;&gt;&lt;/a&gt;赠高考学子（其二） （2019年）&lt;/h2&gt;&lt;p&gt;夜月独挂空流明，竹影自落浓妆泥。&lt;br&gt;鲜衣怒马青草地，清风细雨曾相依。&lt;br&gt;昏灯摇曳行路亮，深紫暗蔽无色花。&lt;br&gt;他日天光照大地，红袍踏叶满城哗。&lt;/p&gt;
&lt;h2 id=&#34;观时事咏怀（2019年2月）&#34;&gt;&lt;a href=&#34;#观时事咏怀（2019年2月）&#34; class=&#34;headerlink&#34; title=&#34;观时事咏怀（2019年2月）&#34;&gt;&lt;/a&gt;观时事咏怀（2019年2月）&lt;/h2&gt;&lt;p&gt;马嚎鬼叫，硝烟烈火，血染凡尘。死生参半，多少离家未曾还。&lt;br&gt;月照江流，烟霞入木，故人有念。流光未去，凭轩泪目无人归。&lt;/p&gt;
&lt;h2 id=&#34;无题（2019年5月）&#34;&gt;&lt;a href=&#34;#无题（2019年5月）&#34; class=&#34;headerlink&#34; title=&#34;无题（2019年5月）&#34;&gt;&lt;/a&gt;无题（2019年5月）&lt;/h2&gt;&lt;p&gt;浮沉千载，风雨万世，渡江月。复不见，风流人物怀醉风生谈笑。电光代烛，杨絮飞起，再无飘摇。春风过，清雨落，梦余无名，巷里看花。&lt;/p&gt;
&lt;h2 id=&#34;不题（2019年5月）&#34;&gt;&lt;a href=&#34;#不题（2019年5月）&#34; class=&#34;headerlink&#34; title=&#34;不题（2019年5月）&#34;&gt;&lt;/a&gt;不题（2019年5月）&lt;/h2&gt;&lt;p&gt;雷惊裂地无人醒，&lt;br&gt;水光扑面不见归。&lt;br&gt;清风翻书何识字？&lt;br&gt;千尺红锦只能回。&lt;/p&gt;
&lt;h2 id=&#34;论孔（2019年5月）&#34;&gt;&lt;a href=&#34;#论孔（2019年5月）&#34; class=&#34;headerlink&#34; title=&#34;论孔（2019年5月）&#34;&gt;&lt;/a&gt;论孔（2019年5月）&lt;/h2&gt;&lt;p&gt;桃花粉嫩终成土，&lt;br&gt;金菊灿烂也归泥。&lt;br&gt;试问何处恒久远，&lt;br&gt;洞庭一度遇周公。&lt;/p&gt;
&lt;h2 id=&#34;路遇无名（2019年5月）&#34;&gt;&lt;a href=&#34;#路遇无名（2019年5月）&#34; class=&#34;headerlink&#34; title=&#34;路遇无名（2019年5月）&#34;&gt;&lt;/a&gt;路遇无名（2019年5月）&lt;/h2&gt;&lt;p&gt;风飘飘，雨飞飞，独坐江头，伸手不见沙堆。酒醒所处，无路可行。可悲，可悲！天下忧患，吾与谁归？&lt;/p&gt;
&lt;h2 id=&#34;我们（2019年）&#34;&gt;&lt;a href=&#34;#我们（2019年）&#34; class=&#34;headerlink&#34; title=&#34;我们（2019年）&#34;&gt;&lt;/a&gt;我们（2019年）&lt;/h2&gt;&lt;p&gt;在黑暗的道路上寻找另一片阴影&lt;br&gt;在寂静的秋风中踏着无色的叶&lt;br&gt;在遥远的故事里唱着失去名字的歌谣&lt;br&gt;&lt;br /&gt;&lt;br&gt;那个遥远的故事&lt;br&gt;他们之中响起的哨声&lt;br&gt;他们留下的半片泪水&lt;br&gt;那支粘在鞋底的树枝&lt;br&gt;尖叫着&lt;br&gt;“只有好的才是好的”&lt;br&gt;然后忘却了&lt;br&gt;&lt;br /&gt;&lt;br&gt;那个不被在乎名字的歌谣&lt;br&gt;唱着血&lt;br&gt;唱着寒冷和饥饿&lt;br&gt;唱着锤子、大棒和镰刀&lt;br&gt;唱着那支树枝&lt;br&gt;&lt;br /&gt;&lt;br&gt;唱着：&lt;br&gt;秋风不吹&lt;br&gt;再多叶片也落不出优美的舞姿&lt;br&gt;道路堵住&lt;br&gt;再多的头颅也垫不成光明的阶梯&lt;/p&gt;
&lt;h2 id=&#34;节（2019年12月）&#34;&gt;&lt;a href=&#34;#节（2019年12月）&#34; class=&#34;headerlink&#34; title=&#34;节（2019年12月）&#34;&gt;&lt;/a&gt;节（2019年12月）&lt;/h2&gt;&lt;p&gt;爆竹声声慢，&lt;br&gt;烟火溢天边。&lt;br&gt;红桃念新语，&lt;br&gt;岁岁不复还。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://rubicon.lightstands.xyz/2021/07/10/set-up-sudo-with-howdy-on-fedora-34-for-faical-authenticating/</guid>
            <title>在Fedora 34上通过Howdy为sudo增加人脸识别认证</title>
            <link>https://rubicon.lightstands.xyz/2021/07/10/set-up-sudo-with-howdy-on-fedora-34-for-faical-authenticating/</link>
            <category>logbook</category>
            <category>Linux记</category>
            <category>生命很短</category>
            <pubDate>Sat, 10 Jul 2021 22:34:29 +0000</pubDate>
            <description><![CDATA[ &lt;p&gt;今天晚上折腾了一个小时，终于把 Howdy 折腾出来了，写篇博文作笔记以备查。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/boltgolt/howdy&#34;&gt;Howdy&lt;/a&gt; 是一个为 Linux 提供 Windows Hello 风格验证的软件，它作为一个 PAM 模块为其它软件提供人脸验证服务。不像 Windows Hello 需要认证过的IR摄像头， Howdy 基本上只要是个摄像头都可以使用。当然，如果没有 IR ，低光环境下的识别率就很拼摄像头的素质了。&lt;/p&gt;
&lt;p&gt;这篇博文主要内容是给 sudo 弄 Howdy：sudo 老是让人输密码着实令人烦躁，但是我又不想取消所有认证，正好 Howdy 的需求很低（只需要一个摄像头）。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;我机器上使用的发行版是 Fedora 34，64 位。&lt;/p&gt;
&lt;h2 id=&#34;安装Howdy&#34;&gt;&lt;a href=&#34;#安装Howdy&#34; class=&#34;headerlink&#34; title=&#34;安装Howdy&#34;&gt;&lt;/a&gt;安装Howdy&lt;/h2&gt;&lt;p&gt;只需要跟随 Howdy 项目的 README 里的步骤就可以安装 Howdy 了：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo dnf copr enable luya/howdy&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sudo dnf install howdy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;然后就按照 README 上面的说法执行 &lt;code&gt;sudo howdy add&lt;/code&gt; 添加面孔，然后就看见显示 &lt;code&gt;pip3 show dlib&lt;/code&gt; 之类的错误信息，意思是找不到 dlib 。这个 copr 仓库里的包没有把 dlib 作为依赖，得自己安装。&lt;/p&gt;
&lt;p&gt;可以用 &lt;code&gt;sudo dnf install python-dlib&lt;/code&gt; 安装dlib。也可以用pip安装： &lt;code&gt;sudo pip install dlib&lt;/code&gt; ，但是编译的时候肯定会卡几分钟，并且大概会占用 2-3GB 左右的内存。&lt;/p&gt;
&lt;p&gt;接下来再次运行 &lt;code&gt;sudo howdy add&lt;/code&gt; ，它会抱怨摄像头路径还没配置好：&lt;/p&gt;
&lt;figure class=&#34;highlight pgsql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;[sudo] &lt;span class=&#34;keyword&#34;&gt;password&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; ***: &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Adding face model &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; the &lt;span class=&#34;keyword&#34;&gt;user&lt;/span&gt; ***&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Enter a label &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; this &lt;span class=&#34;built_in&#34;&gt;new&lt;/span&gt; model [Initial model] (max &lt;span class=&#34;number&#34;&gt;24&lt;/span&gt; characters): &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Camera &lt;span class=&#34;type&#34;&gt;path&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;not&lt;/span&gt; configured correctly, please edit the &lt;span class=&#34;string&#34;&gt;&amp;#x27;device_path&amp;#x27;&lt;/span&gt; config &lt;span class=&#34;keyword&#34;&gt;value&lt;/span&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;Exception&lt;/span&gt; ignored &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt;: &amp;lt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; VideoCapture.__del__ at &lt;span class=&#34;number&#34;&gt;0x7f855eeb1b80&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Traceback (most recent &lt;span class=&#34;keyword&#34;&gt;call&lt;/span&gt; last):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  File &amp;quot;/usr/lib64/security/howdy/recorders/video_capture.py&amp;quot;, &lt;span class=&#34;type&#34;&gt;line&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;55&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; __del__&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    self.internal.&lt;span class=&#34;keyword&#34;&gt;release&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;AttributeError: &lt;span class=&#34;string&#34;&gt;&amp;#x27;VideoCapture&amp;#x27;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;object&lt;/span&gt; has &lt;span class=&#34;keyword&#34;&gt;no&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;attribute&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;internal&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;运行 &lt;code&gt;sudo howdy config&lt;/code&gt; 来打开配置，默认情况下会使用 GNU nano 作为编辑器。找到 &lt;code&gt;device_path = &lt;/code&gt; 这一行，我们要设置的就是这个值。但是怎么知道是哪个路径呢？我用的是VLC里面的”Open Capture Device…”：将”Capture mode”设为”Video camera”，在”Video device name”的下拉菜单里面的选项选择一个，点”Play”。一个一个地尝试不同的选项，哪个有画面就是哪个路径。在我的机器上，这个路径是 &lt;code&gt;/dev/video0&lt;/code&gt; ，最后就是 &lt;code&gt;device_path = /dev/video0&lt;/code&gt; 。&lt;/p&gt;
&lt;img src=&#34;/img/set-up-sudo-with-howdy-on-fedora-34-for-faical-authenticating/vlc-open-capture-device.png&#34; class=&#34;&#34; title=&#34;图片里的最后一个选项：Open Capture Device...，点击之后会打开一个窗口&#34;&gt;

&lt;p&gt;配置好之后运行 &lt;code&gt;sudo howdy add&lt;/code&gt;增 加面孔，这下能够顺利增加了！增加完面孔可以用 &lt;code&gt;sudo howdy test&lt;/code&gt; 打开测试窗口进行测试。&lt;/p&gt;
&lt;h2 id=&#34;配置PAM&#34;&gt;&lt;a href=&#34;#配置PAM&#34; class=&#34;headerlink&#34; title=&#34;配置PAM&#34;&gt;&lt;/a&gt;配置PAM&lt;/h2&gt;&lt;p&gt;PAM ，或者叫 Pluggable Authentication Module ，是一个中心化的身份验证服务。&lt;a href=&#34;https://www.redhat.com/sysadmin/pluggable-authentication-modules-pam&#34;&gt;这里有一篇对PAM的介绍&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;参考 &lt;a href=&#34;https://wiki.archlinux.org/title/Howdy&#34;&gt;Arch Wiki上的Howdy词条&lt;/a&gt;，要配置 sudo 的验证时行为，只需要修改 &lt;code&gt;/etc/pam.d/sudo&lt;/code&gt; ，在原先的第二行前面再加一行：&lt;/p&gt;
&lt;figure class=&#34;highlight awk&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;auth sufficient pam_python.so &lt;span class=&#34;regexp&#34;&gt;/lib64/&lt;/span&gt;security&lt;span class=&#34;regexp&#34;&gt;/howdy/&lt;/span&gt;pam.py&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里用&lt;code&gt;/lib64&lt;/code&gt;替换了 Arch Wiki 词条上的&lt;code&gt;/lib&lt;/code&gt;，是因为提供给 Fedora 的这个包把这些文件安装到&lt;code&gt;/lib64&lt;/code&gt;而不是&lt;code&gt;/lib&lt;/code&gt;，这个地方各个发行版可能都有不同的规则。&lt;/p&gt;
&lt;p&gt;PAM 的配置在修改后会自动应用。现在我们可以试试使用&lt;code&gt;sudo -i&lt;/code&gt;看看有没有调用人脸识别：&lt;/p&gt;
&lt;figure class=&#34;highlight angelscript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;[sudo]&lt;/span&gt; password &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; ***:&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;事情变得奇妙了起来……Howdy 并没有被调用。这说明 PAM 配置哪里出了问题，读一读跟 PAM 有关的日志：&lt;/p&gt;
&lt;figure class=&#34;highlight ebnf&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attribute&#34;&gt;sudo journalctl -g pam -r&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;然后发现了奇妙的错误：&lt;/p&gt;
&lt;figure class=&#34;highlight gradle&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;PAM adding faulty module: &lt;span class=&#34;regexp&#34;&gt;/lib/&lt;/span&gt;security/pam_python.so&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;PAM unable to dlopen(&lt;span class=&#34;regexp&#34;&gt;/lib/&lt;/span&gt;security&lt;span class=&#34;regexp&#34;&gt;/pam_python.so): /&lt;/span&gt;lib&lt;span class=&#34;regexp&#34;&gt;/security/&lt;/span&gt;pam_python.so: cannot open shared object &lt;span class=&#34;keyword&#34;&gt;file&lt;/span&gt;: No such &lt;span class=&#34;keyword&#34;&gt;file&lt;/span&gt; or directory&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;原来是找不到指定的 pam_python.so 这个 PAM 模块（用来调用 Howdy 的 pam.py ，Howdy 提供的 pam.py 是一个 Python 文件）。&lt;/p&gt;
&lt;p&gt;还好 &lt;a href=&#34;https://copr.fedorainfracloud.org/coprs/luya/howdy/&#34;&gt;luya/howdy Copr仓库&lt;/a&gt; 下的评论给我找到了一个简单的出路：根据 [RPM Sphere网站] 上的流程安装了 RPM Fusion 和 RPM Sphere 这两个第三方软件源之后，可以在 RPM Sphere 这个软件源上找到&lt;code&gt;pam_python&lt;/code&gt;这个包：&lt;/p&gt;
&lt;figure class=&#34;highlight cmake&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo dnf &lt;span class=&#34;keyword&#34;&gt;install&lt;/span&gt; pam_python&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;然后就可以愉悦地使用了！&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo -&lt;span class=&#34;selector-tag&#34;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;使用pamtester测试&#34;&gt;&lt;a href=&#34;#使用pamtester测试&#34; class=&#34;headerlink&#34; title=&#34;使用pamtester测试&#34;&gt;&lt;/a&gt;使用pamtester测试&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;http://pamtester.sourceforge.net/&#34;&gt;Pamtester&lt;/a&gt; 可以测试 PAM 的指定验证服务，这样要检查 Howdy 是否生效或者单纯享受人脸识别（大雾）就很简单啦。&lt;/p&gt;
&lt;figure class=&#34;highlight cmake&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo dnf &lt;span class=&#34;keyword&#34;&gt;install&lt;/span&gt; pamtester&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在这篇文章的例子里只需要（用要验证的用户的用户名代替&lt;code&gt;&amp;lt;用户名&amp;gt;&lt;/code&gt;）&lt;/p&gt;
&lt;figure class=&#34;highlight bnf&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;pamtester sudo &lt;span class=&#34;attribute&#34;&gt;&amp;lt;用户名&amp;gt;&lt;/span&gt; authenticate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;就可以触发 PAM 的验证了。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://rubicon.lightstands.xyz/2021/01/04/makru-tutor-2/</guid>
            <title>使用Makru和makru_langc管理现代C项目编译： 配置Makru和makru_langc</title>
            <link>https://rubicon.lightstands.xyz/2021/01/04/makru-tutor-2/</link>
            <category>Makru</category>
            <category>C</category>
            <pubDate>Mon, 04 Jan 2021 18:49:20 +0000</pubDate>
            <description><![CDATA[ &lt;p&gt;在这一篇文章中，我会介绍makru_langc的安装。和普通的编译工具不同，makru_langc是作为Makru的一个插件安装的，而Makru的插件只能安装到项目上随项目源代码附带。这会带来一些不方便，但是能够保证每一个项目都能选择最适合的插件和插件版本而无需担心兼容成本。其实类似的方法在make和cmake的项目中也能经常看见，很多项目都会带有一些脚本或者预定义宏来帮助编译，只是Makru将它变成强制行为了。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;这是一篇属于“使用Makru和makru_langc管理现代C项目编译”系列的文章，你可以在&lt;a href=&#34;/2020/12/26/makru-tutor-1/&#34; title=&#34;使用Makru和makru_langc管理现代C项目编译：引入&amp;amp;目录&#34;&gt;使用Makru和makru_langc管理现代C项目编译：引入&amp;amp;目录&lt;/a&gt;找到目录。&lt;/p&gt;
&lt;p&gt;注意：makru_langc尚未考虑对于Windows的支持。&lt;/p&gt;
&lt;h2 id=&#34;安装Makru&#34;&gt;&lt;a href=&#34;#安装Makru&#34; class=&#34;headerlink&#34; title=&#34;安装Makru&#34;&gt;&lt;/a&gt;安装Makru&lt;/h2&gt;&lt;p&gt;Makru完全由Python编写而成，只需要你有Python。目前对于Python低版本的兼容性未知，但是你至少应该有3.6或更高版本的Python。我的环境使用的是Python 3.9.1。&lt;/p&gt;
&lt;p&gt;如果你不想在系统级别安装Makru，你可以使用&lt;a href=&#34;https://pypi.org/project/virtualenv/&#34;&gt;virtualenv&lt;/a&gt;创建一个目录级的Python虚拟环境。不过其实一般情况下你不需要这样做。&lt;/p&gt;
&lt;figure class=&#34;highlight maxima&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ pip install makru&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Collecting makru&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Downloading makru-&lt;span class=&#34;number&#34;&gt;0.1&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0b14&lt;/span&gt;-py3-none-any.whl (&lt;span class=&#34;number&#34;&gt;12&lt;/span&gt; kB)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Collecting semver&amp;lt;&lt;span class=&#34;number&#34;&gt;3.0&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;,&amp;gt;=&lt;span class=&#34;number&#34;&gt;2.13&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Downloading semver-&lt;span class=&#34;number&#34;&gt;2.13&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;-py2.py3-none-any.whl (&lt;span class=&#34;number&#34;&gt;12&lt;/span&gt; kB)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Collecting pluginbase&amp;lt;&lt;span class=&#34;number&#34;&gt;2.0&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;,&amp;gt;=&lt;span class=&#34;number&#34;&gt;1.0&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Downloading pluginbase-&lt;span class=&#34;number&#34;&gt;1.0&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;.tar.gz (&lt;span class=&#34;number&#34;&gt;41&lt;/span&gt; kB)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     |████████████████████████████████| &lt;span class=&#34;number&#34;&gt;41&lt;/span&gt; kB &lt;span class=&#34;number&#34;&gt;573&lt;/span&gt; kB/s &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Collecting PyYAML&amp;lt;&lt;span class=&#34;number&#34;&gt;6.0&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;,&amp;gt;=&lt;span class=&#34;number&#34;&gt;5.1&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Downloading PyYAML-&lt;span class=&#34;number&#34;&gt;5.3&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.1&lt;/span&gt;.tar.gz (&lt;span class=&#34;number&#34;&gt;269&lt;/span&gt; kB)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     |████████████████████████████████| &lt;span class=&#34;number&#34;&gt;269&lt;/span&gt; kB &lt;span class=&#34;number&#34;&gt;1.1&lt;/span&gt; MB/s &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Building wheels &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; collected packages: pluginbase, PyYAML&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Building wheel &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; pluginbase (setup.py) ... done&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Created wheel &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; pluginbase: filename=pluginbase-&lt;span class=&#34;number&#34;&gt;1.0&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;-py3-none-any.whl size=&lt;span class=&#34;number&#34;&gt;7747&lt;/span&gt; sha256=7f4d815404165862e1c1a5544f115e566dd375355bb1caba1769b27be4d30f9a&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Stored &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;directory&lt;/span&gt;: /tmp/pip-ephem-wheel-cache-aisr91om/wheels/a6/&lt;span class=&#34;number&#34;&gt;31&lt;/span&gt;/1d/6f541ab6fdbb2e3fce5472e65c9769ecb782428d22d68ad938&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Building wheel &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; PyYAML (setup.py) ... done&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Created wheel &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; PyYAML: filename=PyYAML-&lt;span class=&#34;number&#34;&gt;5.3&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.1&lt;/span&gt;-cp39-cp39-linux_x86_64.whl size=&lt;span class=&#34;number&#34;&gt;44617&lt;/span&gt; sha256=184ba6ba623bfa178270185f0afd6ba1ef695f08bb3f0298303ed87a665dc6e5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Stored &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;directory&lt;/span&gt;: /tmp/pip-ephem-wheel-cache-aisr91om/wheels/&lt;span class=&#34;number&#34;&gt;69&lt;/span&gt;/&lt;span class=&#34;number&#34;&gt;60&lt;/span&gt;/&lt;span class=&#34;number&#34;&gt;81&lt;/span&gt;/5cd74b8ee068fbe9e04ca0d53148f28f5c6e2c5b177d5dd622&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Successfully built pluginbase PyYAML&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Installing collected packages: semver, pluginbase, PyYAML, makru&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Successfully installed PyYAML-&lt;span class=&#34;number&#34;&gt;5.3&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.1&lt;/span&gt; makru-&lt;span class=&#34;number&#34;&gt;0.1&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0b14&lt;/span&gt; pluginbase-&lt;span class=&#34;number&#34;&gt;1.0&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt; semver-&lt;span class=&#34;number&#34;&gt;2.13&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到Makru非常小，包含依赖在内只需要600KB左右。&lt;/p&gt;
&lt;p&gt;让我们随便运行一下：&lt;/p&gt;
&lt;figure class=&#34;highlight awk&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ makru&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;panic: could not found &lt;span class=&#34;regexp&#34;&gt;/some/&lt;/span&gt;random&lt;span class=&#34;regexp&#34;&gt;/path/m&lt;/span&gt;akru.yaml.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;好了，看起来Makru装好了。虽然它在抱怨在当前目录下面找不到配置文件，但是我们需要继续向前。配置文件是下一篇博文的问题。&lt;/p&gt;
&lt;h2 id=&#34;安装makru-langc&#34;&gt;&lt;a href=&#34;#安装makru-langc&#34; class=&#34;headerlink&#34; title=&#34;安装makru_langc&#34;&gt;&lt;/a&gt;安装makru_langc&lt;/h2&gt;&lt;p&gt;还记得在文章第一段我提到的事情吗？“Makru的插件只能安装在项目上随源代码附带”。其实意思就是说Makru不存在能在整个系统或用户上生效的插件，所有插件的作用范围仅限于该项目。所以我们并不需要真正地“安装”makru_langc，只需要将它放在指定的文件夹下面就会生效，默认情况下这个目录是&lt;code&gt;&amp;lt;你的项目&amp;gt;/makru/plugins&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;现在我们给我们即将到来的scat项目创建一个文件夹，就叫&lt;code&gt;makru-tutor&lt;/code&gt;。在文章里的完整路径是&lt;code&gt;/path/to/makru-tutor&lt;/code&gt;，所以我们的默认插件目录就是&lt;code&gt;/path/to/makru-tutor/makru/plugins&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;直接放置源代码安装&#34;&gt;&lt;a href=&#34;#直接放置源代码安装&#34; class=&#34;headerlink&#34; title=&#34;直接放置源代码安装&#34;&gt;&lt;/a&gt;直接放置源代码安装&lt;/h3&gt;&lt;p&gt;让我们直接开始吧！访问 &lt;a href=&#34;https://gitlab.com/jinwa/makru_langc&#34;&gt;makru_langc的仓库&lt;/a&gt;，点击下载按钮然后选择合适的压缩包格式。把里面包含&lt;code&gt;__init__.py&lt;/code&gt;的所有文件解压到&lt;code&gt;/path/to/makru-tutor/makru/plugins/makru_langc&lt;/code&gt;下。&lt;/p&gt;
&lt;img src=&#34;/img/makru-tutor/2/screenshot-download-makru-langc-source.png&#34; class=&#34;&#34; title=&#34;直接点击页面上很明显的下载按钮就可以选择压缩包格式了&#34;&gt;

&lt;p&gt;列出makru_langc文件夹的文件列表，要看见&lt;code&gt;__init__.py&lt;/code&gt;才是正确的放法：&lt;/p&gt;
&lt;figure class=&#34;highlight awk&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ ls &lt;span class=&#34;regexp&#34;&gt;/path/&lt;/span&gt;to&lt;span class=&#34;regexp&#34;&gt;/makru-tutor/m&lt;/span&gt;akru&lt;span class=&#34;regexp&#34;&gt;/plugins/m&lt;/span&gt;akru_langc&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;__init__.py&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...其它文件&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这样就安装好了！&lt;/p&gt;
&lt;p&gt;但这篇文章还不应该结束，设想一下：大部分情况下升级插件都不会破坏兼容性，如果你想要享受最新功能和bug修复，每一次更新你都重复下载-解压的操作，这种重复性的操作让人感觉不便。我们还需要一个新的方案。&lt;br&gt;如果你使用Git来管理你的项目，这里有一个更方便的方法：Git子模块。&lt;/p&gt;
&lt;h3 id=&#34;通过Git子模块安装&#34;&gt;&lt;a href=&#34;#通过Git子模块安装&#34; class=&#34;headerlink&#34; title=&#34;通过Git子模块安装&#34;&gt;&lt;/a&gt;通过Git子模块安装&lt;/h3&gt;&lt;p&gt;让我们看看Git子模块的简单解释：&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;有种情况我们经常会遇到：某个工作中的项目需要包含并使用另一个项目。 也许是第三方库，或者你独立开发的，用于多个父项目的库。 现在问题来了：你想要把它们当做两个独立的项目，同时又想在一个项目中使用另一个。&lt;/p&gt;
&lt;p&gt;我们举一个例子。 假设你正在开发一个网站然后创建了 Atom 订阅。 你决定使用一个库，而不是写自己的 Atom 生成代码。 你可能不得不通过 CPAN 安装或 Ruby gem 来包含共享库中的代码，或者将源代码直接拷贝到自己的项目中。 如果将这个库包含进来，那么无论用何种方式都很难定制它，部署则更加困难，因为你必须确保每一个客户端都包含该库。 如果将代码复制到自己的项目中，那么你做的任何自定义修改都会使合并上游的改动变得困难。&lt;/p&gt;
&lt;p&gt;Git 通过子模块来解决这个问题。 子模块允许你将一个 Git 仓库作为另一个 Git 仓库的子目录。 它能让你将另一个仓库克隆到自己的项目中，同时还保持提交的独立。&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;Pro Git, the 2nd edition&lt;/strong&gt;&lt;cite&gt;&lt;a href=&#34;https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97&#34;&gt;7.11 Git 工具 - 子模块&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;

&lt;p&gt;这正是我们需要的！实话说，我在使用Git两三年之后才接触到这个特性，我相信很多人从来没使用过它。不过它确实在一些情况下很有用，比如现在我们的情况。&lt;/p&gt;
&lt;p&gt;好吧，废话少说。如果你需要Git的子模块功能的话你需要先把目录变成一个仓库。我们可以使用Git的魔法咒语来完成这件事：&lt;/p&gt;
&lt;figure class=&#34;highlight awk&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ git init&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;已初始化空的 Git 仓库于 &lt;span class=&#34;regexp&#34;&gt;/path/&lt;/span&gt;to&lt;span class=&#34;regexp&#34;&gt;/makru-tutor/&lt;/span&gt;.git/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;然后再使用一个魔法咒语（你不需要自己手动创建&lt;code&gt;makru/plugins&lt;/code&gt;文件夹，Git会帮你打理好这些）：&lt;/p&gt;
&lt;figure class=&#34;highlight awk&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ git submodule add https:&lt;span class=&#34;regexp&#34;&gt;//gi&lt;/span&gt;tlab.com&lt;span class=&#34;regexp&#34;&gt;/jinwa/m&lt;/span&gt;akru_langc.git makru&lt;span class=&#34;regexp&#34;&gt;/plugins/m&lt;/span&gt;akru_langc&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;正克隆到 &lt;span class=&#34;string&#34;&gt;&amp;#x27;/path/to/makru-tutor/makru/plugins/makru_langc&amp;#x27;&lt;/span&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;remote: Enumerating objects: &lt;span class=&#34;number&#34;&gt;244&lt;/span&gt;, done.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;remote: Counting objects: &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;% (&lt;span class=&#34;number&#34;&gt;244&lt;/span&gt;/&lt;span class=&#34;number&#34;&gt;244&lt;/span&gt;), done.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;remote: Compressing objects: &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;% (&lt;span class=&#34;number&#34;&gt;137&lt;/span&gt;/&lt;span class=&#34;number&#34;&gt;137&lt;/span&gt;), done.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;remote: Total &lt;span class=&#34;number&#34;&gt;250&lt;/span&gt; (delta &lt;span class=&#34;number&#34;&gt;145&lt;/span&gt;), reused &lt;span class=&#34;number&#34;&gt;183&lt;/span&gt; (delta &lt;span class=&#34;number&#34;&gt;104&lt;/span&gt;), pack-reused &lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;接收对象中: &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;% (&lt;span class=&#34;number&#34;&gt;250&lt;/span&gt;&lt;span class=&#34;regexp&#34;&gt;/250), 43.23 KiB | 48.00 KiB/&lt;/span&gt;s, 完成.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;处理 delta 中: &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;% (&lt;span class=&#34;number&#34;&gt;146&lt;/span&gt;/&lt;span class=&#34;number&#34;&gt;146&lt;/span&gt;), 完成.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;然后就可以在相应目录下看到我们的插件：&lt;/p&gt;
&lt;figure class=&#34;highlight awk&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ ls &lt;span class=&#34;regexp&#34;&gt;/path/&lt;/span&gt;to&lt;span class=&#34;regexp&#34;&gt;/makru-tutor/m&lt;/span&gt;akru&lt;span class=&#34;regexp&#34;&gt;/plugins/m&lt;/span&gt;akru_langc&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;__init__.py&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...其它文件&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;（如果你有过Python编程的经验，到这里你应该就明白为何makru_langc要采取这种奇怪的项目布局了）&lt;/p&gt;
&lt;p&gt;但是到这里事情还没完，我们还需要一个提交把我们的子模块放进树里。如果你需要了解Git，你可以看看上面引用的那本《Pro Git》，这本书有中文翻译。&lt;br&gt;现在运行&lt;code&gt;git status&lt;/code&gt;会多出来两个东西：&lt;/p&gt;
&lt;figure class=&#34;highlight awk&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ git status&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;位于分支 master&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;尚无提交&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;要提交的变更：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  （使用 &lt;span class=&#34;string&#34;&gt;&amp;quot;git rm --cached &amp;lt;文件&amp;gt;...&amp;quot;&lt;/span&gt; 以取消暂存）&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        新文件：   .gitmodules&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        新文件：   makru&lt;span class=&#34;regexp&#34;&gt;/plugins/m&lt;/span&gt;akru_langc&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;要提交变更可以这样做：&lt;/p&gt;
&lt;figure class=&#34;highlight nginx&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attribute&#34;&gt;git&lt;/span&gt; commit -m&lt;span class=&#34;string&#34;&gt;&amp;quot;随意产生的无意义信息（不&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;所以我要这样：&lt;/p&gt;
&lt;figure class=&#34;highlight pgsql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ git &lt;span class=&#34;keyword&#34;&gt;commit&lt;/span&gt; -m&amp;quot;add makru_langc to makru-tutor&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[master（根提交） &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;ed585d] &lt;span class=&#34;keyword&#34;&gt;add&lt;/span&gt; makru_langc &lt;span class=&#34;keyword&#34;&gt;to&lt;/span&gt; makru-tutor&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; files changed, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt; insertions(+)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;keyword&#34;&gt;create&lt;/span&gt; mode &lt;span class=&#34;number&#34;&gt;100644&lt;/span&gt; .gitmodules&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;keyword&#34;&gt;create&lt;/span&gt; mode &lt;span class=&#34;number&#34;&gt;160000&lt;/span&gt; makru/plugins/makru_langc&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后安装就完成了！&lt;/p&gt;
&lt;p&gt;不过，到这里我们仅仅是“做了件事”安装了Makru和makru_langc，还没看到任何反馈。别担心，下一篇文章里我们就会得到点反馈了。&lt;/p&gt;
&lt;p&gt;下一篇文章：为可执行文件项目编写配置文件&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://rubicon.lightstands.xyz/2020/12/26/makru-tutor-1/</guid>
            <title>使用Makru和makru_langc管理现代C项目编译：引入&amp;目录</title>
            <link>https://rubicon.lightstands.xyz/2020/12/26/makru-tutor-1/</link>
            <category>Makru</category>
            <category>C</category>
            <category>系列文章</category>
            <pubDate>Sat, 26 Dec 2020 21:21:13 +0000</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;a href=&#34;https://gitlab.com/jinwa/makru&#34;&gt;Makru&lt;/a&gt;是一个用Python编写的全新编译工具。它的目的不是提供更多的编译逻辑，而是提供一个统一的平台方便开发和引入新的编译逻辑。Makru和目前主流的make-like编译系统最大的不同点再于：它没有使用类似宏语法之类的东西为配置文件提供超高的灵活性，而是直接选择了很多现代包管理工具正在使用的结构化数据配置文件（Makru使用的是yaml）。&lt;a href=&#34;https://gitlab.com/jinwa/makru_langc&#34;&gt;makru_langc&lt;/a&gt;就是在它之上构建的C语言项目编译插件。&lt;br&gt;得益于这样的选择，makru_langc提供了非常流畅的编译管理体验。你可以快速理解并编辑配置文件，而不是在配置文件的海洋里晕头转向。另外，makru_langc还支持高自由度的自定义，你甚至可以利用它提供的工具编写自己的编译逻辑。&lt;/p&gt;
&lt;p&gt;这个文章系列将会介绍一个用makru_langc来管理编译的小演示项目scat，它接收标准输入然后输出到标准输出。为了演示makru_langc的功能，scat会有一个子项目叫libcopy。这个子项目里只有一个函数：从第一个File输入，输出到第二个File。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;makru_langc还自带直接从本地pkgconfig查询第三方库的功能，最后一篇文章会覆盖到这个特性，并以此说明如何为makru_langc编写自己的库查询逻辑。&lt;/p&gt;
&lt;h2 id=&#34;环境说明&#34;&gt;&lt;a href=&#34;#环境说明&#34; class=&#34;headerlink&#34; title=&#34;环境说明&#34;&gt;&lt;/a&gt;环境说明&lt;/h2&gt;&lt;p&gt;文章中的开发环境是运行于Linux 5.9.15 x86_64之上的Fedora 33，Python 3.9以及Clang 11.0。Makru的版本是v0.1.0（最新beta版本），makru_langc的版本是尚未发布的r1（你可以直接检出master分支）。&lt;/p&gt;
&lt;h2 id=&#34;目录&#34;&gt;&lt;a href=&#34;#目录&#34; class=&#34;headerlink&#34; title=&#34;目录&#34;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/2021/01/04/makru-tutor-2/&#34; title=&#34;配置Makru和makru_langc&#34;&gt;配置Makru和makru_langc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;为可执行文件项目编写配置文件&lt;/li&gt;
&lt;li&gt;为库项目编写配置文件&lt;/li&gt;
&lt;li&gt;使用Pkgconfig Dependency Resolver引入第三方库&lt;/li&gt;
&lt;li&gt;makru_langc的基本工作流程&lt;/li&gt;
&lt;li&gt;编写一个基于命令行输入的Dependency Resolver&lt;/li&gt;
&lt;li&gt;makru_langc代码阅读指引&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://rubicon.lightstands.xyz/2020/12/26/hello-world/</guid>
            <title>早上好,欢迎来到世界!</title>
            <link>https://rubicon.lightstands.xyz/2020/12/26/hello-world/</link>
            <pubDate>Sat, 26 Dec 2020 00:00:00 +0000</pubDate>
            <description><![CDATA[ &lt;p&gt;新博客的第一篇博文，介绍一下博客文字的使用协议：&lt;/p&gt;
&lt;p&gt;如无特别规定，博客中作者的文字、图片等非代码资源使用 &lt;a href=&#34;https://creativecommons.org/licenses/by-nc-nd/4.0/&#34;&gt;创作共享 保留权利-非商业性使用-禁止二次演绎(CC BY-NC-ND) 4.0&lt;/a&gt; 协议共享。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://creativecommons.org/licenses/by-nc-nd/4.0/&#34;&gt;&lt;img src=&#34;https://i.creativecommons.org/l/by-nc-nd/4.0/88x31.png&#34; alt=&#34;CC BY-NC-ND Logo&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如无特别规定，博客中作者的代码使用 &lt;a href=&#34;https://www.gnu.org/licenses/agpl-3.0.html&#34;&gt;GNU Affero General Public License, version 3&lt;/a&gt; or later 协议共享，但是你可以通过邮件向作者请求帮助（包括额外的授权）。&lt;br&gt;&lt;a href=&#34;https://www.gnu.org/licenses/agpl.html&#34;&gt;&lt;img src=&#34;https://www.gnu.org/graphics/agplv3-with-text-162x68.png&#34; alt=&#34;AGPLv3 Logo&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;不属于作者的，文章中引用的资源（包括但不限于文字、代码、图片、商标）由各自所有者所有并按照授权协议执行。&lt;/p&gt;
&lt;p&gt;欢迎通过 &lt;a href=&#34;mailto:a09d124g7@foo.bar&#34;&gt;a09d124g7@foo.bar&lt;/a&gt; （请将foo.bar替换为relay.firefox.com）联系我（文章问题或是聊天都可以，但是我会无视掉我认为在问无意义问题的邮件，包括问一些网上查一下就知道结果的问题）！由于使用了Firefox Relay，请将邮件大小控制在150KB以内。&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
